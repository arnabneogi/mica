<?php
/**
 * @file
 * Mica Datasets Opal Variables
 */

function mica_datasets_variables_menu() {
  $items = array();
  $items['variable-opal-search'] = array(
    'title' => t('Datasets Opal variables'),
    'access callback' => TRUE,
    'page callback' => 'mica_datasets_variables_page',
    'page arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_ACTION,
    //   'file' => 'mica_datasets.pages.inc',
  );

  $items['opal-varaible-detail/%/dataset/%'] = array(
    //  'title' => t('Datasets Opal variables'),
    'access callback' => TRUE,
    'page callback' => 'mica_datasets_variables_detail_page',
    'page arguments' => array(1, 3, 5),
    'weight' => 5,
    //   'type' => MENU_LOCAL_ACTION,
    //   'file' => 'mica_datasets.pages.inc',
  );

  $items['opal-varaible-detail-statistics/%/dataset/%'] = array(
    //  'title' => t('Datasets Opal variables'),
    'access callback' => TRUE,
    'page callback' => 'mica_datasets_variable_get_ajax_statistics',
    'page arguments' => array(1, 3, 5),
    'weight' => 5,
    //   'type' => MENU_LOCAL_ACTION,
    //   'file' => 'mica_datasets.pages.inc',
  );

  return $items;
}

function mica_datasets_variables_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  $links = array();
  switch ($root_path) {
    case 'datasets':
    case 'node/%':
      $node = $router_item['page_arguments'][0];
      if ($node != NULL && isset($node->type) && $node->type === 'dataset') {
        if (node_access('update', $node)) {
          // variables
          $links['view-opal-variable'] = array(
            '#weight' => 30,
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('Datasets Opal variables'),
              'href' => 'variable-opal-search' . '/' . $node->nid,
              'localized_options' => array(
                'attributes' => array(
                  'class' => 'highlight'
                )
              )
            ),

          );
        }
      }
      break;
  }
  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

/**
 * Check node type (if provided) and node access.
 *
 * @param node $node
 * @param string $bundle
 * @param string $op
 */
function _mica_datasets_variables_node_access($node, $bundle = NULL, $op = 'update') {
  if (!is_object($node)) {
    $node = node_load($node);
  }
  // Make sure the user can view the original node content.
  if ($bundle != NULL) {
    return TRUE;
  }
  return node_access($op, $node);
}

function mica_datasets_variables_page($dataset_nid) {
  global $languages;
  if (isset($languages)) {
    $lang = $languages;
  }
  else {
    $lang = 'und';
  }

  $dataset_detail = node_load($dataset_nid);
  $dataset_wrapper = entity_metadata_wrapper('node', $dataset_nid);
  //$studies = array();
  $rows[] = array();
  $popup_variab_detail = array();
  foreach ($dataset_wrapper->field_dataset_studies->getIterator() as $study) {
    $nid = $study->nid->value();
    $opal_variabls = _mica_datasets_variables_get_opal_variables($dataset_nid, $nid);
    if (!empty($opal_variabls)) {
      $study_variabls[$nid] = $opal_variabls;
      foreach ($study_variabls[$nid]['variables'] as $variable) {

        $rows[] = array(
          l($variable['title'], 'opal-varaible-detail/' . $variable['title'] . '/dataset/' . $dataset_nid . '/study/' . $nid, array(
              'attributes' => array(
                'id' => $variable['title'],
                //'class' => array('modals', $variable['title'])
              ),
              // 'external' => TRUE
            )),
          !empty($variable['label'][$lang]) ? $variable['label'][$lang] : '',
          $dataset_detail->title
        );

      }
    }
  }

  $output = '';
  // Table construct
  $header = array('Name', 'Label', 'Dataset');
  $per_page = 20;
  $current_page = pager_default_initialize(count($rows), $per_page);
  $chunks = array_chunk($rows, $per_page, TRUE);
  $output .= '<br/>';

  $output .= theme(
      'table',
      array(
        'header' => $header,
        'rows' => $chunks[$current_page],
        'empty' => t('No data found'),
        'sticky' => FALSE,
        'attributes' => array('id' => 'variables_overview')
      )
    ) . theme('pager', array('quantity', count($rows)));

  //generate title of page :
  drupal_set_title('Datasets Opal variables' . $dataset_detail->title);
// generate specific breadcrumbs for study variable pages
  $breadcrumb = _mica_datasets_menu_generate_breadcrumbs_variables('node/' . $dataset_nid);
  $breadcrumbs = array();
  $breadcrumbs[] = l('Home', '');
  for ($i = 0; $i < count($breadcrumb); $i++) {
    $breadcrumbs[] = l(truncate_utf8($breadcrumb[$i]['link_title'], 45, TRUE, TRUE), $breadcrumb[$i]['link_path']);
  }
  drupal_set_breadcrumb($breadcrumbs);

  // The $delta parameter tells us which block is being requested.
  return '<div id=\'Variables_opal\'>' . $output . '</div>';
}

function mica_datasets_variables_detail_page($var_name = NULL, $dataset_nid = NULL, $study_nid = NULL) {
  ctools_add_css('mica_datasets_variables', 'mica_datasets_variables');
  ctools_add_js('mica_datasets_variables_ajax_statics', 'mica_datasets_variables');
// generate specific breadcrumbs for study variable pages
  $breadcrumb = _mica_datasets_menu_generate_breadcrumbs_variables('node/' . $dataset_nid);
  $breadcrumbs = array();
  $breadcrumbs[] = l('Home', '');
  for ($i = 0; $i < count($breadcrumb); $i++) {
    $breadcrumbs[] = l(truncate_utf8($breadcrumb[$i]['link_title'], 45, TRUE, TRUE), $breadcrumb[$i]['link_path']);
  }
  $breadcrumbs[] = $var_name;
  drupal_set_breadcrumb($breadcrumbs);

  $variable_detail = mica_datasets_variables_get_detail_variable($dataset_nid, $study_nid, $var_name);

  $html = theme('mica_datasets_variables_function', array(
    "variable_detail" => $variable_detail,
  ));
  return $html;
}

function mica_datasets_variables_get_categories_table($variable) {
  global $languages;
  $lang = isset($languages) ? $languages : 'und';
  $tab = t('No categories for this Variables');
  if (!empty($variable)) {
    $rows_cat = array();
    $header_categ = array('Name', 'Label', 'Missing');
    foreach ($variable as $val_categ) {
      $rows_cat[] = array(
        $val_categ['name'],
        $val_categ['label'][$lang],
        _mica_datasets_variables_missing($val_categ['missing'])
      );
    }

    $tab = theme(
      'table',
      array(
        'header' => $header_categ,
        'rows' => $rows_cat,
        'empty' => t('No data found'),
        'sticky' => FALSE,
        'attributes' => array('id' => 'variables_overview')
      )
    );
  }
  return $tab;
}

function _mica_datasets_variables_missing($variable) {
  if (isset($variable) && $variable == 1) {
    return '<div title="Missing" class="variable_category-missing"><img src="/profiles/mica_distribution/modules/mica/extensions/mica_datasets/images/tick.png"></div>';
  }
  else {
    return '';
  }
}

function mica_datasets_variables_theme($existing, $type, $theme, $path) {
  return array(
    'mica_datasets_variables_function' => array(
      'template' => 'mica_datasets_variables',
      'variables' => array(
        'argument_1' => NULL
      )
    ),
  );
}

function mica_datasets_variables_block_info() {
  $blocks['opal_variables'] = array(
    // info: The name of the block.
    'info' => t('Current search'),
    'status' => TRUE,
    'region' => 'sidebar_first',
  );
  return $blocks;
}

function mica_datasets_variables_block_view($delta) {

  switch ($delta) {
    case 'opal_variables':
      // Create your block content here
      $block['subject'] = t('Current search');
      $block['content'] = 'Your block content, or the result of a function that returns the content';
      return $block;
  }
}

function _mica_datasets_variables_get_opal_variables($dataset_nid, $study_nid) {
  try {
    return mica_datasets_variables_get_variables($dataset_nid, $study_nid, 'variables');
  } catch (Exception $e) {
    $study_wrapper = entity_metadata_wrapper('node', $study_nid);
    $study_title = $study_wrapper->title->value();
    switch ($e->getCode()) {
      case 404:
        drupal_set_message(
          t('Opal server was not found (error 404) for study %study.',
            array('%study' => $study_title)),
          'error'
        );
        break;
      default:
        drupal_set_message(
          t('Error while getting variables for study %study: %error',
            array('%study' => $study_title, '%error' => $e->getMessage())),
          'error'
        );
    }
  }
  return NULL;
}

function mica_datasets_variables_get_variables($dataset_nid, $study_nid, $variables) {
  $variables = array($variables);
  $array = mica_datasets_variables_get_resource($dataset_nid, $study_nid, $variables);

  if (is_array($array)) {
    $harmonization = array();
    $harmonization['dataset_nid'] = $dataset_nid;
    $harmonization['study_nid'] = $study_nid;

    $all_items = mica_opal_jsonPath($array, '$.*');
    unset($array);

    $harmonization = _mica_datasets_variables_iterate_variables($all_items);
    return $harmonization;
  }
  throw new Exception(t('There was an error decoding the JSON document.'));

}

function mica_datasets_variables_get_detail_variable($dataset_nid, $study_nid, $variable) {
  $resource = array('variable/' . $variable);
  $array = mica_datasets_variables_get_resource($dataset_nid, $study_nid, $resource);
  if (is_array($array)) {
    $harmonization = _mica_datasets_variables_iterate_detail_variable($dataset_nid, $array);
    $harmonization['dataset'] = node_load($dataset_nid)->title;
    $harmonization['dataset-alias'] = drupal_get_path_alias("node/" . $dataset_nid);
    $harmonization['study-id'] = $study_nid;
    $harmonization['dataset-id'] = $dataset_nid;
    unset($array);
    return $harmonization;
  }
  throw new Exception(t('There was an error decoding the JSON document.'));
}

function mica_datasets_variable_get_ajax_statistics($variable = NULL, $dataset_nid = NULL, $study_nid = NULL) {
  $resource = array('variable/' . $variable);
  $variable_detail = mica_datasets_variables_get_resource($dataset_nid, $study_nid, $resource);
  print _mica_datasets_variable_render_statics($dataset_nid, _mica_opal_parse_categories($variable_detail), _mica_opal_json_get_string($variable_detail, 'valueType'));

}

function _mica_datasets_variables_iterate_detail_variable($dataset_nid, $item) {
  global $language;
  $lan = $language->language;
  $variable_info = array();

  // Check if uuid is present
  $variable_info['uuid'] = _mica_opal_json_get_string($item, 'attributes[?(@[\'name\']==\'uuid\'), ?(@[\'namespace\']==\'maelstrom\')].value');
  $variable_info['title'] = _mica_opal_json_get_string($item, 'name');
  $variable_info_label = _mica_opal_parse_localized($item, 'attributes[?(@[\'name\']==\'label\')]');
  $variable_info['label'] = $lan ? $variable_info_label[$lan] : $variable_info_label['und'];
  $variable_info['value_type'] = _mica_opal_json_get_string($item, 'valueType');
  $variable_info['unit'] = _mica_opal_json_get_string($item, 'unit');
  $repeatable = _mica_opal_json_get_string($item, 'isRepeatable');
  // Explicitly set to 0 to avoid the error when saving an empty field into the database
  $variable_info['repeatable'] = _mica_datasets_variables_repeatable($repeatable);

  $script = _mica_opal_json_get_string($item, 'attributes[?(@[\'name\'==\'script\' and @namespace == \'opal\'].value');
  $variable_info['script'] = strlen($script) === 0
    ? _mica_opal_json_get_string($item, 'attributes[?(@[\'name\']==\'script\')].value')
    : $script;

  $status = _mica_opal_json_get_string($item, 'attributes[?(@[\'name\']==\'status\'), ?(@[\'namespace\']==\'maelstrom\')].value');
  $variable_info['status'] = empty($status) || !strpos(",complete,impossible", $status) ? 'undetermined' : strtolower($status);
  $variable_info_description = _mica_opal_parse_localized($item, 'attributes[?(@[\'name\']==\'description\'), ?(@[\'namespace\']==\'maelstrom\')]');;
  $variable_info['description'] = $lan ? $variable_info_description[$lan] : $variable_info_description['und'];
  //   $variable_info['comment'] = _mica_opal_parse_localized($item, 'attributes[?(@[\'name\']==\'comment\'), ?(@[\'namespace\']==\'maelstrom\')]');
  $variable_info['categories'] = mica_datasets_variables_get_categories_table(_mica_opal_parse_categories($item));
  $variable_info['attributes'] = _mica_opal_parse_attributes($item);
  // $variable_info['stats']  = _mica_datasets_variable_render_statics($dataset_nid,_mica_opal_parse_categories($item), $variable_info['value_type']);
  return $variable_info;

}

function  _mica_datasets_variables_atribute_is_taxonomie($atribute) {
  $taxonomies = _mica_datasets_taxonomies();
  foreach ($taxonomies as $taxonomy) {
    $machine_name = substr($taxonomy[0], 0, drupal_strlen($taxonomy[0]) - 4);
    if ($atribute == $machine_name) {
      return $taxonomy[1];
    }
  }
  return NULL;
}

function _mica_datasets_variable_render_statics($dataset_id, $categories, $type) {
  $values = array();
  $is_categorical = FALSE;
  foreach ($categories as $category) {
    if ($category['missing'] == FALSE) {
      $is_categorical = TRUE;
      break;
    }
  }

  $values['dataset_id'] = $dataset_id;
  $values['variable_id'] = 'HLTH_OBESE_STRICT';
  if ($is_categorical) {
    $values['options']['type'] = 'CategoryTerm';
  }
  else if ($type == 'integer' || $type == 'decimal') {
    $values['options']['type'] = 'RangeTerm';
  }
  else {
    $values['options']['type'] = 'TodoTerm';
  }

  $term = new MicaDatasetQueryTerm($values);
  $impl = $term->termImpl();
  if ($impl->checkStats() && user_is_logged_in()) {
    return $impl->view($categories);
  }
}

function _mica_datasets_variables_repeatable($variable) {
  if (isset($variable) && $variable == 1) {
    return t('Yes');
  }
  else {
    return t('No');
  }
}

function _mica_opal_parse_attributes($item) {
  $categories = array();
  $json_categories = array_shift(mica_opal_jsonPath($item, 'attributes'));
  if (is_array($json_categories)) {
    foreach ($json_categories as $json_cat) {
      if ($name_variable = _mica_datasets_variables_atribute_is_taxonomie($json_cat['name'])) {
        $category = array(
          'namespace' => isset($json_cat['namespace']) ? $json_cat['namespace'] : NULL,
          'name' => $name_variable,
          'value' => $json_cat['value'],
          'local' => isset($json_cat['locale']) ? $json_cat['locale'] : LANGUAGE_NONE
        );
        $categories[] = $category;
      }

    }
  }
  return $categories;
}

function _mica_datasets_variables_iterate_variables($all_items) {
  $harmonization = array();
  foreach ($all_items as $item) {

    $variable_info = array();
    // Check if uuid is present

    $variable_info['title'] = _mica_opal_json_get_string($item, 'name');
    $variable_info['label'] = _mica_opal_parse_localized($item, 'attributes[?(@[\'name\']==\'label\')]');
    $harmonization['variables'][$variable_info['title']] = $variable_info;

  }
  return $harmonization;

}

/*
 * Function de get ws resources from Opal
 * @param $dataset_nid
 * @param $study_nid
 * @param $resource : array of resource to be query exp : $resource - array
 * */
function mica_datasets_variables_get_resource($dataset_nid, $study_nid, $resource) {
  $connector = mica_connector_query($dataset_nid, $study_nid, TRUE);
  $array = array();
  if ($connector) {
    $opal = new MicaDatasetOpalConnectionClass($connector);
    $post = new HttpClientRequest($connector->__call("getTableResourceURI", $resource), array(
      'method' => 'GET',
      'headers' => array('Accept' => array('application/json')),
      'data' => array(),
      'parameters' => array(),
    ));
    $raw = $opal->client()->execute($post);
    $array = json_decode($raw, TRUE);

    // Support JSON lines format.r
    if (!is_array($array)) {
      $raw = preg_replace('/}\s*{/', '},{', $raw);
      $raw = '[' . $raw . ']';
      $array = json_decode($raw, TRUE);
    }

  }
  return $array;
}