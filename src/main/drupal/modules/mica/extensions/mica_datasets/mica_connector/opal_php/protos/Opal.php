<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Opal.proto
//   Date: 2014-03-10 20:41:21

namespace Opal {

  class KeyType extends \DrSlump\Protobuf\Enum {
    const KEY_PAIR = 0;
    const CERTIFICATE = 1;
  }
}
namespace Opal {

  class AclAction extends \DrSlump\Protobuf\Enum {
    const DATASOURCE_ALL = 0;
    const TABLE_ADD = 1;
    const TABLE_ALL = 3;
    const TABLE_READ = 4;
    const TABLE_VALUES = 5;
    const TABLE_EDIT = 6;
    const VARIABLE_READ = 12;
    const DATABASES_ALL = 13;
    const R_USE = 14;
    const DATASHIELD_ALL = 15;
    const DATASHIELD_USE = 16;
    const FILES_ALL = 18;
    const FILES_READ = 19;
    const FILES_SHARE = 20;
    const REPORT_TEMPLATE_ALL = 21;
    const REPORT_TEMPLATE_READ = 22;
    const PROJECT_ALL = 23;
    const TABLE_VALUES_EDIT = 24;
    const PROJECT_ADD = 25;
    const SYSTEM_ALL = 26;
  }
}
namespace Opal {

  class ServiceStatus extends \DrSlump\Protobuf\Enum {
    const RUNNING = 1;
    const STOPPED = 2;
  }
}
namespace Opal {

  class TableIndexationStatus extends \DrSlump\Protobuf\Enum {
    const NOT_INDEXED = 1;
    const OUTDATED = 2;
    const IN_PROGRESS = 3;
    const UPTODATE = 4;
  }
}
namespace Opal {

  class ScheduleType extends \DrSlump\Protobuf\Enum {
    const NOT_SCHEDULED = 1;
    const MINUTES_5 = 2;
    const MINUTES_15 = 3;
    const MINUTES_30 = 4;
    const HOURLY = 5;
    const DAILY = 6;
    const WEEKLY = 7;
  }
}
namespace Opal {

  class Day extends \DrSlump\Protobuf\Enum {
    const SUNDAY = 1;
    const MONDAY = 2;
    const TUESDAY = 3;
    const WEDNESDAY = 4;
    const THURSDAY = 5;
    const FRIDAY = 6;
    const SATURDAY = 7;
  }
}
namespace Opal {

  class KeyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $alias = NULL;

    /**  @var string */
    public $certificate = NULL;

    /**  @var int - \Opal\KeyType */
    public $keyType = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.KeyDto');

      // REQUIRED STRING alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "alias";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING certificate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "certificate";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM keyType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "keyType";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\KeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias() {
      return $this->_has(1);
    }

    /**
     * Clear <alias> value
     *
     * @return \Opal\KeyDto
     */
    public function clearAlias() {
      return $this->_clear(1);
    }

    /**
     * Get <alias> value
     *
     * @return string
     */
    public function getAlias() {
      return $this->_get(1);
    }

    /**
     * Set <alias> value
     *
     * @param string $value
     * @return \Opal\KeyDto
     */
    public function setAlias($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <certificate> has a value
     *
     * @return boolean
     */
    public function hasCertificate() {
      return $this->_has(2);
    }

    /**
     * Clear <certificate> value
     *
     * @return \Opal\KeyDto
     */
    public function clearCertificate() {
      return $this->_clear(2);
    }

    /**
     * Get <certificate> value
     *
     * @return string
     */
    public function getCertificate() {
      return $this->_get(2);
    }

    /**
     * Set <certificate> value
     *
     * @param string $value
     * @return \Opal\KeyDto
     */
    public function setCertificate($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <keyType> has a value
     *
     * @return boolean
     */
    public function hasKeyType() {
      return $this->_has(3);
    }

    /**
     * Clear <keyType> value
     *
     * @return \Opal\KeyDto
     */
    public function clearKeyType() {
      return $this->_clear(3);
    }

    /**
     * Get <keyType> value
     *
     * @return int - \Opal\KeyType
     */
    public function getKeyType() {
      return $this->_get(3);
    }

    /**
     * Set <keyType> value
     *
     * @param int - \Opal\KeyType $value
     * @return \Opal\KeyDto
     */
    public function setKeyType($value) {
      return $this->_set(3, $value);
    }
  }
}

namespace Opal {

  class KeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $alias = NULL;

    /**  @var \Opal\PrivateKeyForm */
    public $privateForm = NULL;

    /**  @var string */
    public $privateImport = NULL;

    /**  @var \Opal\PublicKeyForm */
    public $publicForm = NULL;

    /**  @var string */
    public $publicImport = NULL;

    /**  @var string */
    public $certificateFile = NULL;

    /**  @var int - \Opal\KeyType */
    public $keyType = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.KeyForm');

      // REQUIRED STRING alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "alias";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE privateForm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "privateForm";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Opal\PrivateKeyForm';
      $descriptor->addField($f);

      // OPTIONAL STRING privateImport = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "privateImport";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE publicForm = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "publicForm";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Opal\PublicKeyForm';
      $descriptor->addField($f);

      // OPTIONAL STRING publicImport = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "publicImport";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING certificateFile = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "certificateFile";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED ENUM keyType = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 7;
      $f->name = "keyType";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\KeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias() {
      return $this->_has(1);
    }

    /**
     * Clear <alias> value
     *
     * @return \Opal\KeyForm
     */
    public function clearAlias() {
      return $this->_clear(1);
    }

    /**
     * Get <alias> value
     *
     * @return string
     */
    public function getAlias() {
      return $this->_get(1);
    }

    /**
     * Set <alias> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setAlias($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <privateForm> has a value
     *
     * @return boolean
     */
    public function hasPrivateForm() {
      return $this->_has(2);
    }

    /**
     * Clear <privateForm> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPrivateForm() {
      return $this->_clear(2);
    }

    /**
     * Get <privateForm> value
     *
     * @return \Opal\PrivateKeyForm
     */
    public function getPrivateForm() {
      return $this->_get(2);
    }

    /**
     * Set <privateForm> value
     *
     * @param \Opal\PrivateKeyForm $value
     * @return \Opal\KeyForm
     */
    public function setPrivateForm(\Opal\PrivateKeyForm $value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <privateImport> has a value
     *
     * @return boolean
     */
    public function hasPrivateImport() {
      return $this->_has(3);
    }

    /**
     * Clear <privateImport> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPrivateImport() {
      return $this->_clear(3);
    }

    /**
     * Get <privateImport> value
     *
     * @return string
     */
    public function getPrivateImport() {
      return $this->_get(3);
    }

    /**
     * Set <privateImport> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setPrivateImport($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <publicForm> has a value
     *
     * @return boolean
     */
    public function hasPublicForm() {
      return $this->_has(4);
    }

    /**
     * Clear <publicForm> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPublicForm() {
      return $this->_clear(4);
    }

    /**
     * Get <publicForm> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function getPublicForm() {
      return $this->_get(4);
    }

    /**
     * Set <publicForm> value
     *
     * @param \Opal\PublicKeyForm $value
     * @return \Opal\KeyForm
     */
    public function setPublicForm(\Opal\PublicKeyForm $value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <publicImport> has a value
     *
     * @return boolean
     */
    public function hasPublicImport() {
      return $this->_has(5);
    }

    /**
     * Clear <publicImport> value
     *
     * @return \Opal\KeyForm
     */
    public function clearPublicImport() {
      return $this->_clear(5);
    }

    /**
     * Get <publicImport> value
     *
     * @return string
     */
    public function getPublicImport() {
      return $this->_get(5);
    }

    /**
     * Set <publicImport> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setPublicImport($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <certificateFile> has a value
     *
     * @return boolean
     */
    public function hasCertificateFile() {
      return $this->_has(6);
    }

    /**
     * Clear <certificateFile> value
     *
     * @return \Opal\KeyForm
     */
    public function clearCertificateFile() {
      return $this->_clear(6);
    }

    /**
     * Get <certificateFile> value
     *
     * @return string
     */
    public function getCertificateFile() {
      return $this->_get(6);
    }

    /**
     * Set <certificateFile> value
     *
     * @param string $value
     * @return \Opal\KeyForm
     */
    public function setCertificateFile($value) {
      return $this->_set(6, $value);
    }

    /**
     * Check if <keyType> has a value
     *
     * @return boolean
     */
    public function hasKeyType() {
      return $this->_has(7);
    }

    /**
     * Clear <keyType> value
     *
     * @return \Opal\KeyForm
     */
    public function clearKeyType() {
      return $this->_clear(7);
    }

    /**
     * Get <keyType> value
     *
     * @return int - \Opal\KeyType
     */
    public function getKeyType() {
      return $this->_get(7);
    }

    /**
     * Set <keyType> value
     *
     * @param int - \Opal\KeyType $value
     * @return \Opal\KeyForm
     */
    public function setKeyType($value) {
      return $this->_set(7, $value);
    }
  }
}

namespace Opal {

  class PrivateKeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $algo = NULL;

    /**  @var int */
    public $size = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.PrivateKeyForm');

      // REQUIRED STRING algo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "algo";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "size";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <algo> has a value
     *
     * @return boolean
     */
    public function hasAlgo() {
      return $this->_has(1);
    }

    /**
     * Clear <algo> value
     *
     * @return \Opal\PrivateKeyForm
     */
    public function clearAlgo() {
      return $this->_clear(1);
    }

    /**
     * Get <algo> value
     *
     * @return string
     */
    public function getAlgo() {
      return $this->_get(1);
    }

    /**
     * Set <algo> value
     *
     * @param string $value
     * @return \Opal\PrivateKeyForm
     */
    public function setAlgo($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize() {
      return $this->_has(2);
    }

    /**
     * Clear <size> value
     *
     * @return \Opal\PrivateKeyForm
     */
    public function clearSize() {
      return $this->_clear(2);
    }

    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize() {
      return $this->_get(2);
    }

    /**
     * Set <size> value
     *
     * @param int $value
     * @return \Opal\PrivateKeyForm
     */
    public function setSize($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class PublicKeyForm extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string */
    public $organizationalUnit = NULL;

    /**  @var string */
    public $organization = NULL;

    /**  @var string */
    public $locality = NULL;

    /**  @var string */
    public $state = NULL;

    /**  @var string */
    public $country = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.PublicKeyForm');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING organizationalUnit = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "organizationalUnit";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING organization = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "organization";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING locality = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "locality";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING state = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "state";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING country = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "country";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <organizationalUnit> has a value
     *
     * @return boolean
     */
    public function hasOrganizationalUnit() {
      return $this->_has(2);
    }

    /**
     * Clear <organizationalUnit> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearOrganizationalUnit() {
      return $this->_clear(2);
    }

    /**
     * Get <organizationalUnit> value
     *
     * @return string
     */
    public function getOrganizationalUnit() {
      return $this->_get(2);
    }

    /**
     * Set <organizationalUnit> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setOrganizationalUnit($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <organization> has a value
     *
     * @return boolean
     */
    public function hasOrganization() {
      return $this->_has(3);
    }

    /**
     * Clear <organization> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearOrganization() {
      return $this->_clear(3);
    }

    /**
     * Get <organization> value
     *
     * @return string
     */
    public function getOrganization() {
      return $this->_get(3);
    }

    /**
     * Set <organization> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setOrganization($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <locality> has a value
     *
     * @return boolean
     */
    public function hasLocality() {
      return $this->_has(4);
    }

    /**
     * Clear <locality> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearLocality() {
      return $this->_clear(4);
    }

    /**
     * Get <locality> value
     *
     * @return string
     */
    public function getLocality() {
      return $this->_get(4);
    }

    /**
     * Set <locality> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setLocality($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState() {
      return $this->_has(5);
    }

    /**
     * Clear <state> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearState() {
      return $this->_clear(5);
    }

    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState() {
      return $this->_get(5);
    }

    /**
     * Set <state> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setState($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry() {
      return $this->_has(6);
    }

    /**
     * Clear <country> value
     *
     * @return \Opal\PublicKeyForm
     */
    public function clearCountry() {
      return $this->_clear(6);
    }

    /**
     * Get <country> value
     *
     * @return string
     */
    public function getCountry() {
      return $this->_get(6);
    }

    /**
     * Set <country> value
     *
     * @param string $value
     * @return \Opal\PublicKeyForm
     */
    public function setCountry($value) {
      return $this->_set(6, $value);
    }
  }
}

namespace Opal\FileDto {

  class FileType extends \DrSlump\Protobuf\Enum {
    const FILE = 0;
    const FOLDER = 1;
  }
}
namespace Opal {

  class FileDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string */
    public $path = NULL;

    /**  @var int - \Opal\FileDto\FileType */
    public $type = NULL;

    /**  @var \Opal\FileDto[] */
    public $children = array();

    /**  @var int */
    public $size = NULL;

    /**  @var int */
    public $lastModifiedTime = NULL;

    /**  @var boolean */
    public $readable = NULL;

    /**  @var boolean */
    public $writable = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.FileDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "path";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "type";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\FileDto\FileType';
      $descriptor->addField($f);

      // REPEATED MESSAGE children = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "children";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\FileDto';
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "size";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 lastModifiedTime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "lastModifiedTime";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED BOOL readable = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 7;
      $f->name = "readable";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL writable = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 8;
      $f->name = "writable";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\FileDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\FileDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath() {
      return $this->_has(2);
    }

    /**
     * Clear <path> value
     *
     * @return \Opal\FileDto
     */
    public function clearPath() {
      return $this->_clear(2);
    }

    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath() {
      return $this->_get(2);
    }

    /**
     * Set <path> value
     *
     * @param string $value
     * @return \Opal\FileDto
     */
    public function setPath($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType() {
      return $this->_has(3);
    }

    /**
     * Clear <type> value
     *
     * @return \Opal\FileDto
     */
    public function clearType() {
      return $this->_clear(3);
    }

    /**
     * Get <type> value
     *
     * @return int - \Opal\FileDto\FileType
     */
    public function getType() {
      return $this->_get(3);
    }

    /**
     * Set <type> value
     *
     * @param int - \Opal\FileDto\FileType $value
     * @return \Opal\FileDto
     */
    public function setType($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <children> has a value
     *
     * @return boolean
     */
    public function hasChildren() {
      return $this->_has(4);
    }

    /**
     * Clear <children> value
     *
     * @return \Opal\FileDto
     */
    public function clearChildren() {
      return $this->_clear(4);
    }

    /**
     * Get <children> value
     *
     * @param int $idx
     * @return \Opal\FileDto
     */
    public function getChildren($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <children> value
     *
     * @param \Opal\FileDto $value
     * @return \Opal\FileDto
     */
    public function setChildren(\Opal\FileDto $value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <children>
     *
     * @return \Opal\FileDto[]
     */
    public function getChildrenList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <children>
     *
     * @param \Opal\FileDto $value
     * @return \Opal\FileDto
     */
    public function addChildren(\Opal\FileDto $value) {
      return $this->_add(4, $value);
    }

    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize() {
      return $this->_has(5);
    }

    /**
     * Clear <size> value
     *
     * @return \Opal\FileDto
     */
    public function clearSize() {
      return $this->_clear(5);
    }

    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize() {
      return $this->_get(5);
    }

    /**
     * Set <size> value
     *
     * @param int $value
     * @return \Opal\FileDto
     */
    public function setSize($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <lastModifiedTime> has a value
     *
     * @return boolean
     */
    public function hasLastModifiedTime() {
      return $this->_has(6);
    }

    /**
     * Clear <lastModifiedTime> value
     *
     * @return \Opal\FileDto
     */
    public function clearLastModifiedTime() {
      return $this->_clear(6);
    }

    /**
     * Get <lastModifiedTime> value
     *
     * @return int
     */
    public function getLastModifiedTime() {
      return $this->_get(6);
    }

    /**
     * Set <lastModifiedTime> value
     *
     * @param int $value
     * @return \Opal\FileDto
     */
    public function setLastModifiedTime($value) {
      return $this->_set(6, $value);
    }

    /**
     * Check if <readable> has a value
     *
     * @return boolean
     */
    public function hasReadable() {
      return $this->_has(7);
    }

    /**
     * Clear <readable> value
     *
     * @return \Opal\FileDto
     */
    public function clearReadable() {
      return $this->_clear(7);
    }

    /**
     * Get <readable> value
     *
     * @return boolean
     */
    public function getReadable() {
      return $this->_get(7);
    }

    /**
     * Set <readable> value
     *
     * @param boolean $value
     * @return \Opal\FileDto
     */
    public function setReadable($value) {
      return $this->_set(7, $value);
    }

    /**
     * Check if <writable> has a value
     *
     * @return boolean
     */
    public function hasWritable() {
      return $this->_has(8);
    }

    /**
     * Clear <writable> value
     *
     * @return \Opal\FileDto
     */
    public function clearWritable() {
      return $this->_clear(8);
    }

    /**
     * Get <writable> value
     *
     * @return boolean
     */
    public function getWritable() {
      return $this->_get(8);
    }

    /**
     * Set <writable> value
     *
     * @param boolean $value
     * @return \Opal\FileDto
     */
    public function setWritable($value) {
      return $this->_set(8, $value);
    }
  }
}

namespace Opal {

  class LocaleDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string */
    public $display = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.LocaleDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING display = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "display";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\LocaleDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\LocaleDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <display> has a value
     *
     * @return boolean
     */
    public function hasDisplay() {
      return $this->_has(2);
    }

    /**
     * Clear <display> value
     *
     * @return \Opal\LocaleDto
     */
    public function clearDisplay() {
      return $this->_clear(2);
    }

    /**
     * Get <display> value
     *
     * @return string
     */
    public function getDisplay() {
      return $this->_get(2);
    }

    /**
     * Set <display> value
     *
     * @param string $value
     * @return \Opal\LocaleDto
     */
    public function setDisplay($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class ReportTemplateDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string */
    public $design = NULL;

    /**  @var string */
    public $format = "html";

    /**  @var \Opal\ParameterDto[] */
    public $parameters = array();

    /**  @var string */
    public $cron = NULL;

    /**  @var string[] */
    public $emailNotification = array();

    /**  @var string */
    public $project = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ReportTemplateDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING design = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "design";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING format = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "format";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = "html";
      $descriptor->addField($f);

      // REPEATED MESSAGE parameters = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "parameters";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\ParameterDto';
      $descriptor->addField($f);

      // OPTIONAL STRING cron = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "cron";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING emailNotification = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "emailNotification";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING project = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 7;
      $f->name = "project";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <design> has a value
     *
     * @return boolean
     */
    public function hasDesign() {
      return $this->_has(2);
    }

    /**
     * Clear <design> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearDesign() {
      return $this->_clear(2);
    }

    /**
     * Get <design> value
     *
     * @return string
     */
    public function getDesign() {
      return $this->_get(2);
    }

    /**
     * Set <design> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setDesign($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <format> has a value
     *
     * @return boolean
     */
    public function hasFormat() {
      return $this->_has(3);
    }

    /**
     * Clear <format> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearFormat() {
      return $this->_clear(3);
    }

    /**
     * Get <format> value
     *
     * @return string
     */
    public function getFormat() {
      return $this->_get(3);
    }

    /**
     * Set <format> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setFormat($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters() {
      return $this->_has(4);
    }

    /**
     * Clear <parameters> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearParameters() {
      return $this->_clear(4);
    }

    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return \Opal\ParameterDto
     */
    public function getParameters($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <parameters> value
     *
     * @param \Opal\ParameterDto $value
     * @return \Opal\ReportTemplateDto
     */
    public function setParameters(\Opal\ParameterDto $value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <parameters>
     *
     * @return \Opal\ParameterDto[]
     */
    public function getParametersList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <parameters>
     *
     * @param \Opal\ParameterDto $value
     * @return \Opal\ReportTemplateDto
     */
    public function addParameters(\Opal\ParameterDto $value) {
      return $this->_add(4, $value);
    }

    /**
     * Check if <cron> has a value
     *
     * @return boolean
     */
    public function hasCron() {
      return $this->_has(5);
    }

    /**
     * Clear <cron> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearCron() {
      return $this->_clear(5);
    }

    /**
     * Get <cron> value
     *
     * @return string
     */
    public function getCron() {
      return $this->_get(5);
    }

    /**
     * Set <cron> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setCron($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <emailNotification> has a value
     *
     * @return boolean
     */
    public function hasEmailNotification() {
      return $this->_has(6);
    }

    /**
     * Clear <emailNotification> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearEmailNotification() {
      return $this->_clear(6);
    }

    /**
     * Get <emailNotification> value
     *
     * @param int $idx
     * @return string
     */
    public function getEmailNotification($idx = NULL) {
      return $this->_get(6, $idx);
    }

    /**
     * Set <emailNotification> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setEmailNotification($value, $idx = NULL) {
      return $this->_set(6, $value, $idx);
    }

    /**
     * Get all elements of <emailNotification>
     *
     * @return string[]
     */
    public function getEmailNotificationList() {
      return $this->_get(6);
    }

    /**
     * Add a new element to <emailNotification>
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function addEmailNotification($value) {
      return $this->_add(6, $value);
    }

    /**
     * Check if <project> has a value
     *
     * @return boolean
     */
    public function hasProject() {
      return $this->_has(7);
    }

    /**
     * Clear <project> value
     *
     * @return \Opal\ReportTemplateDto
     */
    public function clearProject() {
      return $this->_clear(7);
    }

    /**
     * Get <project> value
     *
     * @return string
     */
    public function getProject() {
      return $this->_get(7);
    }

    /**
     * Set <project> value
     *
     * @param string $value
     * @return \Opal\ReportTemplateDto
     */
    public function setProject($value) {
      return $this->_set(7, $value);
    }
  }
}

namespace Opal {

  class ReportDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string */
    public $link = NULL;

    /**  @var string */
    public $publicLink = NULL;

    /**  @var int */
    public $size = NULL;

    /**  @var int */
    public $lastModifiedTime = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ReportDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING link = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "link";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING publicLink = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "publicLink";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "size";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 lastModifiedTime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "lastModifiedTime";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\ReportDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ReportDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink() {
      return $this->_has(2);
    }

    /**
     * Clear <link> value
     *
     * @return \Opal\ReportDto
     */
    public function clearLink() {
      return $this->_clear(2);
    }

    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink() {
      return $this->_get(2);
    }

    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Opal\ReportDto
     */
    public function setLink($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <publicLink> has a value
     *
     * @return boolean
     */
    public function hasPublicLink() {
      return $this->_has(3);
    }

    /**
     * Clear <publicLink> value
     *
     * @return \Opal\ReportDto
     */
    public function clearPublicLink() {
      return $this->_clear(3);
    }

    /**
     * Get <publicLink> value
     *
     * @return string
     */
    public function getPublicLink() {
      return $this->_get(3);
    }

    /**
     * Set <publicLink> value
     *
     * @param string $value
     * @return \Opal\ReportDto
     */
    public function setPublicLink($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize() {
      return $this->_has(4);
    }

    /**
     * Clear <size> value
     *
     * @return \Opal\ReportDto
     */
    public function clearSize() {
      return $this->_clear(4);
    }

    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize() {
      return $this->_get(4);
    }

    /**
     * Set <size> value
     *
     * @param int $value
     * @return \Opal\ReportDto
     */
    public function setSize($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <lastModifiedTime> has a value
     *
     * @return boolean
     */
    public function hasLastModifiedTime() {
      return $this->_has(5);
    }

    /**
     * Clear <lastModifiedTime> value
     *
     * @return \Opal\ReportDto
     */
    public function clearLastModifiedTime() {
      return $this->_clear(5);
    }

    /**
     * Get <lastModifiedTime> value
     *
     * @return int
     */
    public function getLastModifiedTime() {
      return $this->_get(5);
    }

    /**
     * Set <lastModifiedTime> value
     *
     * @param int $value
     * @return \Opal\ReportDto
     */
    public function setLastModifiedTime($value) {
      return $this->_set(5, $value);
    }
  }
}

namespace Opal {

  class ParameterDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = NULL;

    /**  @var string */
    public $value = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ParameterDto');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "key";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "value";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey() {
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \Opal\ParameterDto
     */
    public function clearKey() {
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey() {
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Opal\ParameterDto
     */
    public function setKey($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue() {
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \Opal\ParameterDto
     */
    public function clearValue() {
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue() {
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Opal\ParameterDto
     */
    public function setValue($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal\Subject {

  class SubjectType extends \DrSlump\Protobuf\Enum {
    const USER = 0;
    const GROUP = 1;
  }
}
namespace Opal {

  class Subject extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $principal = NULL;

    /**  @var int - \Opal\Subject\SubjectType */
    public $type = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.Subject');

      // REQUIRED STRING principal = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "principal";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "type";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\Subject\SubjectType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <principal> has a value
     *
     * @return boolean
     */
    public function hasPrincipal() {
      return $this->_has(1);
    }

    /**
     * Clear <principal> value
     *
     * @return \Opal\Subject
     */
    public function clearPrincipal() {
      return $this->_clear(1);
    }

    /**
     * Get <principal> value
     *
     * @return string
     */
    public function getPrincipal() {
      return $this->_get(1);
    }

    /**
     * Set <principal> value
     *
     * @param string $value
     * @return \Opal\Subject
     */
    public function setPrincipal($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType() {
      return $this->_has(2);
    }

    /**
     * Clear <type> value
     *
     * @return \Opal\Subject
     */
    public function clearType() {
      return $this->_clear(2);
    }

    /**
     * Get <type> value
     *
     * @return int - \Opal\Subject\SubjectType
     */
    public function getType() {
      return $this->_get(2);
    }

    /**
     * Set <type> value
     *
     * @param int - \Opal\Subject\SubjectType $value
     * @return \Opal\Subject
     */
    public function setType($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class Acl extends \DrSlump\Protobuf\Message {

    /**  @var \Opal\Subject */
    public $subject = NULL;

    /**  @var string */
    public $resource = NULL;

    /**  @var string[] */
    public $actions = array();

    /**  @var string */
    public $domain = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.Acl');

      // REQUIRED MESSAGE subject = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "subject";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\Subject';
      $descriptor->addField($f);

      // REQUIRED STRING resource = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "resource";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING actions = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "actions";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING domain = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "domain";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <subject> has a value
     *
     * @return boolean
     */
    public function hasSubject() {
      return $this->_has(1);
    }

    /**
     * Clear <subject> value
     *
     * @return \Opal\Acl
     */
    public function clearSubject() {
      return $this->_clear(1);
    }

    /**
     * Get <subject> value
     *
     * @return \Opal\Subject
     */
    public function getSubject() {
      return $this->_get(1);
    }

    /**
     * Set <subject> value
     *
     * @param \Opal\Subject $value
     * @return \Opal\Acl
     */
    public function setSubject(\Opal\Subject $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <resource> has a value
     *
     * @return boolean
     */
    public function hasResource() {
      return $this->_has(2);
    }

    /**
     * Clear <resource> value
     *
     * @return \Opal\Acl
     */
    public function clearResource() {
      return $this->_clear(2);
    }

    /**
     * Get <resource> value
     *
     * @return string
     */
    public function getResource() {
      return $this->_get(2);
    }

    /**
     * Set <resource> value
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function setResource($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <actions> has a value
     *
     * @return boolean
     */
    public function hasActions() {
      return $this->_has(3);
    }

    /**
     * Clear <actions> value
     *
     * @return \Opal\Acl
     */
    public function clearActions() {
      return $this->_clear(3);
    }

    /**
     * Get <actions> value
     *
     * @param int $idx
     * @return string
     */
    public function getActions($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <actions> value
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function setActions($value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <actions>
     *
     * @return string[]
     */
    public function getActionsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <actions>
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function addActions($value) {
      return $this->_add(3, $value);
    }

    /**
     * Check if <domain> has a value
     *
     * @return boolean
     */
    public function hasDomain() {
      return $this->_has(4);
    }

    /**
     * Clear <domain> value
     *
     * @return \Opal\Acl
     */
    public function clearDomain() {
      return $this->_clear(4);
    }

    /**
     * Get <domain> value
     *
     * @return string
     */
    public function getDomain() {
      return $this->_get(4);
    }

    /**
     * Set <domain> value
     *
     * @param string $value
     * @return \Opal\Acl
     */
    public function setDomain($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace Opal {

  class Acls extends \DrSlump\Protobuf\Message {

    /**  @var \Opal\Subject */
    public $subject = NULL;

    /**  @var \Opal\Acl[] */
    public $acls = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.Acls');

      // REQUIRED MESSAGE subject = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "subject";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\Subject';
      $descriptor->addField($f);

      // REPEATED MESSAGE acls = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "acls";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\Acl';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <subject> has a value
     *
     * @return boolean
     */
    public function hasSubject() {
      return $this->_has(1);
    }

    /**
     * Clear <subject> value
     *
     * @return \Opal\Acls
     */
    public function clearSubject() {
      return $this->_clear(1);
    }

    /**
     * Get <subject> value
     *
     * @return \Opal\Subject
     */
    public function getSubject() {
      return $this->_get(1);
    }

    /**
     * Set <subject> value
     *
     * @param \Opal\Subject $value
     * @return \Opal\Acls
     */
    public function setSubject(\Opal\Subject $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <acls> has a value
     *
     * @return boolean
     */
    public function hasAcls() {
      return $this->_has(2);
    }

    /**
     * Clear <acls> value
     *
     * @return \Opal\Acls
     */
    public function clearAcls() {
      return $this->_clear(2);
    }

    /**
     * Get <acls> value
     *
     * @param int $idx
     * @return \Opal\Acl
     */
    public function getAcls($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <acls> value
     *
     * @param \Opal\Acl $value
     * @return \Opal\Acls
     */
    public function setAcls(\Opal\Acl $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <acls>
     *
     * @return \Opal\Acl[]
     */
    public function getAclsList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <acls>
     *
     * @param \Opal\Acl $value
     * @return \Opal\Acls
     */
    public function addAcls(\Opal\Acl $value) {
      return $this->_add(2, $value);
    }
  }
}

namespace Opal {

  class OpalMap extends \DrSlump\Protobuf\Message {

    /**  @var string[] */
    public $keys = array();

    /**  @var string[] */
    public $values = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalMap');

      // REPEATED STRING keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "keys";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "values";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys() {
      return $this->_has(1);
    }

    /**
     * Clear <keys> value
     *
     * @return \Opal\OpalMap
     */
    public function clearKeys() {
      return $this->_clear(1);
    }

    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeys($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <keys> value
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function setKeys($value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <keys>
     *
     * @return string[]
     */
    public function getKeysList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <keys>
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function addKeys($value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues() {
      return $this->_has(2);
    }

    /**
     * Clear <values> value
     *
     * @return \Opal\OpalMap
     */
    public function clearValues() {
      return $this->_clear(2);
    }

    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <values> value
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function setValues($value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \Opal\OpalMap
     */
    public function addValues($value) {
      return $this->_add(2, $value);
    }
  }
}

namespace Opal {

  class EntryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = NULL;

    /**  @var string */
    public $value = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.EntryDto');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "key";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "value";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey() {
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \Opal\EntryDto
     */
    public function clearKey() {
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey() {
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Opal\EntryDto
     */
    public function setKey($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue() {
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \Opal\EntryDto
     */
    public function clearValue() {
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue() {
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Opal\EntryDto
     */
    public function setValue($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class ServiceDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var int - \Opal\ServiceStatus */
    public $status = NULL;

    /**  @var string */
    public $link = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ServiceDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "status";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\ServiceStatus';
      $descriptor->addField($f);

      // REQUIRED STRING link = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "link";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\ServiceDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ServiceDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus() {
      return $this->_has(2);
    }

    /**
     * Clear <status> value
     *
     * @return \Opal\ServiceDto
     */
    public function clearStatus() {
      return $this->_clear(2);
    }

    /**
     * Get <status> value
     *
     * @return int - \Opal\ServiceStatus
     */
    public function getStatus() {
      return $this->_get(2);
    }

    /**
     * Set <status> value
     *
     * @param int - \Opal\ServiceStatus $value
     * @return \Opal\ServiceDto
     */
    public function setStatus($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink() {
      return $this->_has(3);
    }

    /**
     * Clear <link> value
     *
     * @return \Opal\ServiceDto
     */
    public function clearLink() {
      return $this->_clear(3);
    }

    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink() {
      return $this->_get(3);
    }

    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Opal\ServiceDto
     */
    public function setLink($value) {
      return $this->_set(3, $value);
    }
  }
}

namespace Opal {

  class ServiceCfgDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ServiceCfgDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\ServiceCfgDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\ServiceCfgDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }
  }
}

namespace Opal {

  class ESCfgDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $clusterName = NULL;

    /**  @var string */
    public $indexName = NULL;

    /**  @var boolean */
    public $dataNode = TRUE;

    /**  @var int */
    public $shards = NULL;

    /**  @var int */
    public $replicas = NULL;

    /**  @var string */
    public $settings = NULL;

    /**  @var boolean */
    public $enabled = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ESCfgDto');

      // REQUIRED STRING clusterName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "clusterName";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING indexName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "indexName";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED BOOL dataNode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "dataNode";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = TRUE;
      $descriptor->addField($f);

      // REQUIRED INT32 shards = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "shards";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 replicas = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "replicas";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING settings = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "settings";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL enabled = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 7;
      $f->name = "enabled";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <clusterName> has a value
     *
     * @return boolean
     */
    public function hasClusterName() {
      return $this->_has(1);
    }

    /**
     * Clear <clusterName> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearClusterName() {
      return $this->_clear(1);
    }

    /**
     * Get <clusterName> value
     *
     * @return string
     */
    public function getClusterName() {
      return $this->_get(1);
    }

    /**
     * Set <clusterName> value
     *
     * @param string $value
     * @return \Opal\ESCfgDto
     */
    public function setClusterName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <indexName> has a value
     *
     * @return boolean
     */
    public function hasIndexName() {
      return $this->_has(2);
    }

    /**
     * Clear <indexName> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearIndexName() {
      return $this->_clear(2);
    }

    /**
     * Get <indexName> value
     *
     * @return string
     */
    public function getIndexName() {
      return $this->_get(2);
    }

    /**
     * Set <indexName> value
     *
     * @param string $value
     * @return \Opal\ESCfgDto
     */
    public function setIndexName($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <dataNode> has a value
     *
     * @return boolean
     */
    public function hasDataNode() {
      return $this->_has(3);
    }

    /**
     * Clear <dataNode> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearDataNode() {
      return $this->_clear(3);
    }

    /**
     * Get <dataNode> value
     *
     * @return boolean
     */
    public function getDataNode() {
      return $this->_get(3);
    }

    /**
     * Set <dataNode> value
     *
     * @param boolean $value
     * @return \Opal\ESCfgDto
     */
    public function setDataNode($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <shards> has a value
     *
     * @return boolean
     */
    public function hasShards() {
      return $this->_has(4);
    }

    /**
     * Clear <shards> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearShards() {
      return $this->_clear(4);
    }

    /**
     * Get <shards> value
     *
     * @return int
     */
    public function getShards() {
      return $this->_get(4);
    }

    /**
     * Set <shards> value
     *
     * @param int $value
     * @return \Opal\ESCfgDto
     */
    public function setShards($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <replicas> has a value
     *
     * @return boolean
     */
    public function hasReplicas() {
      return $this->_has(5);
    }

    /**
     * Clear <replicas> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearReplicas() {
      return $this->_clear(5);
    }

    /**
     * Get <replicas> value
     *
     * @return int
     */
    public function getReplicas() {
      return $this->_get(5);
    }

    /**
     * Set <replicas> value
     *
     * @param int $value
     * @return \Opal\ESCfgDto
     */
    public function setReplicas($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <settings> has a value
     *
     * @return boolean
     */
    public function hasSettings() {
      return $this->_has(6);
    }

    /**
     * Clear <settings> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearSettings() {
      return $this->_clear(6);
    }

    /**
     * Get <settings> value
     *
     * @return string
     */
    public function getSettings() {
      return $this->_get(6);
    }

    /**
     * Set <settings> value
     *
     * @param string $value
     * @return \Opal\ESCfgDto
     */
    public function setSettings($value) {
      return $this->_set(6, $value);
    }

    /**
     * Check if <enabled> has a value
     *
     * @return boolean
     */
    public function hasEnabled() {
      return $this->_has(7);
    }

    /**
     * Clear <enabled> value
     *
     * @return \Opal\ESCfgDto
     */
    public function clearEnabled() {
      return $this->_clear(7);
    }

    /**
     * Get <enabled> value
     *
     * @return boolean
     */
    public function getEnabled() {
      return $this->_get(7);
    }

    /**
     * Set <enabled> value
     *
     * @param boolean $value
     * @return \Opal\ESCfgDto
     */
    public function setEnabled($value) {
      return $this->_set(7, $value);
    }
  }
}

namespace Opal {

  class TableIndexStatusDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $datasource = NULL;

    /**  @var string */
    public $table = NULL;

    /**  @var string */
    public $indexCreated = NULL;

    /**  @var string */
    public $indexLastUpdate = NULL;

    /**  @var string */
    public $tableLastUpdate = NULL;

    /**  @var \Opal\ScheduleDto */
    public $schedule = NULL;

    /**  @var int - \Opal\TableIndexationStatus */
    public $status = NULL;

    /**  @var float */
    public $progress = NULL;

    /**  @var string */
    public $link = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.TableIndexStatusDto');

      // REQUIRED STRING datasource = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "datasource";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING table = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "table";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING indexCreated = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "indexCreated";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING indexLastUpdate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "indexLastUpdate";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING tableLastUpdate = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "tableLastUpdate";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE schedule = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "schedule";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\ScheduleDto';
      $descriptor->addField($f);

      // REQUIRED ENUM status = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 7;
      $f->name = "status";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\TableIndexationStatus';
      $descriptor->addField($f);

      // OPTIONAL FLOAT progress = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 8;
      $f->name = "progress";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING link = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 9;
      $f->name = "link";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <datasource> has a value
     *
     * @return boolean
     */
    public function hasDatasource() {
      return $this->_has(1);
    }

    /**
     * Clear <datasource> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearDatasource() {
      return $this->_clear(1);
    }

    /**
     * Get <datasource> value
     *
     * @return string
     */
    public function getDatasource() {
      return $this->_get(1);
    }

    /**
     * Set <datasource> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setDatasource($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable() {
      return $this->_has(2);
    }

    /**
     * Clear <table> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearTable() {
      return $this->_clear(2);
    }

    /**
     * Get <table> value
     *
     * @return string
     */
    public function getTable() {
      return $this->_get(2);
    }

    /**
     * Set <table> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setTable($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <indexCreated> has a value
     *
     * @return boolean
     */
    public function hasIndexCreated() {
      return $this->_has(3);
    }

    /**
     * Clear <indexCreated> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearIndexCreated() {
      return $this->_clear(3);
    }

    /**
     * Get <indexCreated> value
     *
     * @return string
     */
    public function getIndexCreated() {
      return $this->_get(3);
    }

    /**
     * Set <indexCreated> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setIndexCreated($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <indexLastUpdate> has a value
     *
     * @return boolean
     */
    public function hasIndexLastUpdate() {
      return $this->_has(4);
    }

    /**
     * Clear <indexLastUpdate> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearIndexLastUpdate() {
      return $this->_clear(4);
    }

    /**
     * Get <indexLastUpdate> value
     *
     * @return string
     */
    public function getIndexLastUpdate() {
      return $this->_get(4);
    }

    /**
     * Set <indexLastUpdate> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setIndexLastUpdate($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <tableLastUpdate> has a value
     *
     * @return boolean
     */
    public function hasTableLastUpdate() {
      return $this->_has(5);
    }

    /**
     * Clear <tableLastUpdate> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearTableLastUpdate() {
      return $this->_clear(5);
    }

    /**
     * Get <tableLastUpdate> value
     *
     * @return string
     */
    public function getTableLastUpdate() {
      return $this->_get(5);
    }

    /**
     * Set <tableLastUpdate> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setTableLastUpdate($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <schedule> has a value
     *
     * @return boolean
     */
    public function hasSchedule() {
      return $this->_has(6);
    }

    /**
     * Clear <schedule> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearSchedule() {
      return $this->_clear(6);
    }

    /**
     * Get <schedule> value
     *
     * @return \Opal\ScheduleDto
     */
    public function getSchedule() {
      return $this->_get(6);
    }

    /**
     * Set <schedule> value
     *
     * @param \Opal\ScheduleDto $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setSchedule(\Opal\ScheduleDto $value) {
      return $this->_set(6, $value);
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus() {
      return $this->_has(7);
    }

    /**
     * Clear <status> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearStatus() {
      return $this->_clear(7);
    }

    /**
     * Get <status> value
     *
     * @return int - \Opal\TableIndexationStatus
     */
    public function getStatus() {
      return $this->_get(7);
    }

    /**
     * Set <status> value
     *
     * @param int - \Opal\TableIndexationStatus $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setStatus($value) {
      return $this->_set(7, $value);
    }

    /**
     * Check if <progress> has a value
     *
     * @return boolean
     */
    public function hasProgress() {
      return $this->_has(8);
    }

    /**
     * Clear <progress> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearProgress() {
      return $this->_clear(8);
    }

    /**
     * Get <progress> value
     *
     * @return float
     */
    public function getProgress() {
      return $this->_get(8);
    }

    /**
     * Set <progress> value
     *
     * @param float $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setProgress($value) {
      return $this->_set(8, $value);
    }

    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink() {
      return $this->_has(9);
    }

    /**
     * Clear <link> value
     *
     * @return \Opal\TableIndexStatusDto
     */
    public function clearLink() {
      return $this->_clear(9);
    }

    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink() {
      return $this->_get(9);
    }

    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Opal\TableIndexStatusDto
     */
    public function setLink($value) {
      return $this->_set(9, $value);
    }
  }
}

namespace Opal {

  class ScheduleDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \Opal\ScheduleType */
    public $type = NULL;

    /**  @var int - \Opal\Day */
    public $day = NULL;

    /**  @var int */
    public $hours = NULL;

    /**  @var int */
    public $minutes = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.ScheduleDto');

      // REQUIRED ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "type";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\ScheduleType';
      $descriptor->addField($f);

      // OPTIONAL ENUM day = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "day";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Opal\Day';
      $descriptor->addField($f);

      // OPTIONAL INT32 hours = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "hours";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 minutes = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "minutes";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType() {
      return $this->_has(1);
    }

    /**
     * Clear <type> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearType() {
      return $this->_clear(1);
    }

    /**
     * Get <type> value
     *
     * @return int - \Opal\ScheduleType
     */
    public function getType() {
      return $this->_get(1);
    }

    /**
     * Set <type> value
     *
     * @param int - \Opal\ScheduleType $value
     * @return \Opal\ScheduleDto
     */
    public function setType($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <day> has a value
     *
     * @return boolean
     */
    public function hasDay() {
      return $this->_has(2);
    }

    /**
     * Clear <day> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearDay() {
      return $this->_clear(2);
    }

    /**
     * Get <day> value
     *
     * @return int - \Opal\Day
     */
    public function getDay() {
      return $this->_get(2);
    }

    /**
     * Set <day> value
     *
     * @param int - \Opal\Day $value
     * @return \Opal\ScheduleDto
     */
    public function setDay($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <hours> has a value
     *
     * @return boolean
     */
    public function hasHours() {
      return $this->_has(3);
    }

    /**
     * Clear <hours> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearHours() {
      return $this->_clear(3);
    }

    /**
     * Get <hours> value
     *
     * @return int
     */
    public function getHours() {
      return $this->_get(3);
    }

    /**
     * Set <hours> value
     *
     * @param int $value
     * @return \Opal\ScheduleDto
     */
    public function setHours($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <minutes> has a value
     *
     * @return boolean
     */
    public function hasMinutes() {
      return $this->_has(4);
    }

    /**
     * Clear <minutes> value
     *
     * @return \Opal\ScheduleDto
     */
    public function clearMinutes() {
      return $this->_clear(4);
    }

    /**
     * Get <minutes> value
     *
     * @return int
     */
    public function getMinutes() {
      return $this->_get(4);
    }

    /**
     * Set <minutes> value
     *
     * @param int $value
     * @return \Opal\ScheduleDto
     */
    public function setMinutes($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace Opal {

  class PasswordDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string */
    public $oldPassword = NULL;

    /**  @var string */
    public $newPassword = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.PasswordDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING oldPassword = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "oldPassword";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING newPassword = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "newPassword";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\PasswordDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\PasswordDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <oldPassword> has a value
     *
     * @return boolean
     */
    public function hasOldPassword() {
      return $this->_has(2);
    }

    /**
     * Clear <oldPassword> value
     *
     * @return \Opal\PasswordDto
     */
    public function clearOldPassword() {
      return $this->_clear(2);
    }

    /**
     * Get <oldPassword> value
     *
     * @return string
     */
    public function getOldPassword() {
      return $this->_get(2);
    }

    /**
     * Set <oldPassword> value
     *
     * @param string $value
     * @return \Opal\PasswordDto
     */
    public function setOldPassword($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <newPassword> has a value
     *
     * @return boolean
     */
    public function hasNewPassword() {
      return $this->_has(3);
    }

    /**
     * Clear <newPassword> value
     *
     * @return \Opal\PasswordDto
     */
    public function clearNewPassword() {
      return $this->_clear(3);
    }

    /**
     * Get <newPassword> value
     *
     * @return string
     */
    public function getNewPassword() {
      return $this->_get(3);
    }

    /**
     * Set <newPassword> value
     *
     * @param string $value
     * @return \Opal\PasswordDto
     */
    public function setNewPassword($value) {
      return $this->_set(3, $value);
    }
  }
}

namespace Opal\SubjectCredentialsDto {

  class AuthenticationType extends \DrSlump\Protobuf\Enum {
    const PASSWORD = 1;
    const CERTIFICATE = 2;
  }
}
namespace Opal {

  class SubjectCredentialsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var int - \Opal\SubjectCredentialsDto\AuthenticationType */
    public $authenticationType = NULL;

    /**  @var string */
    public $password = NULL;

    /**  @var string */
    public $certificate = NULL;

    /**  @var string[] */
    public $groups = array();

    /**  @var boolean */
    public $enabled = TRUE;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.SubjectCredentialsDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM authenticationType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "authenticationType";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\SubjectCredentialsDto\AuthenticationType';
      $descriptor->addField($f);

      // OPTIONAL STRING password = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "password";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES certificate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "certificate";
      $f->type = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING groups = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "groups";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL enabled = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "enabled";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default = TRUE;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\SubjectCredentialsDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\SubjectCredentialsDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <authenticationType> has a value
     *
     * @return boolean
     */
    public function hasAuthenticationType() {
      return $this->_has(2);
    }

    /**
     * Clear <authenticationType> value
     *
     * @return \Opal\SubjectCredentialsDto
     */
    public function clearAuthenticationType() {
      return $this->_clear(2);
    }

    /**
     * Get <authenticationType> value
     *
     * @return int - \Opal\SubjectCredentialsDto\AuthenticationType
     */
    public function getAuthenticationType() {
      return $this->_get(2);
    }

    /**
     * Set <authenticationType> value
     *
     * @param int - \Opal\SubjectCredentialsDto\AuthenticationType $value
     * @return \Opal\SubjectCredentialsDto
     */
    public function setAuthenticationType($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <password> has a value
     *
     * @return boolean
     */
    public function hasPassword() {
      return $this->_has(3);
    }

    /**
     * Clear <password> value
     *
     * @return \Opal\SubjectCredentialsDto
     */
    public function clearPassword() {
      return $this->_clear(3);
    }

    /**
     * Get <password> value
     *
     * @return string
     */
    public function getPassword() {
      return $this->_get(3);
    }

    /**
     * Set <password> value
     *
     * @param string $value
     * @return \Opal\SubjectCredentialsDto
     */
    public function setPassword($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <certificate> has a value
     *
     * @return boolean
     */
    public function hasCertificate() {
      return $this->_has(4);
    }

    /**
     * Clear <certificate> value
     *
     * @return \Opal\SubjectCredentialsDto
     */
    public function clearCertificate() {
      return $this->_clear(4);
    }

    /**
     * Get <certificate> value
     *
     * @return string
     */
    public function getCertificate() {
      return $this->_get(4);
    }

    /**
     * Set <certificate> value
     *
     * @param string $value
     * @return \Opal\SubjectCredentialsDto
     */
    public function setCertificate($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <groups> has a value
     *
     * @return boolean
     */
    public function hasGroups() {
      return $this->_has(5);
    }

    /**
     * Clear <groups> value
     *
     * @return \Opal\SubjectCredentialsDto
     */
    public function clearGroups() {
      return $this->_clear(5);
    }

    /**
     * Get <groups> value
     *
     * @param int $idx
     * @return string
     */
    public function getGroups($idx = NULL) {
      return $this->_get(5, $idx);
    }

    /**
     * Set <groups> value
     *
     * @param string $value
     * @return \Opal\SubjectCredentialsDto
     */
    public function setGroups($value, $idx = NULL) {
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <groups>
     *
     * @return string[]
     */
    public function getGroupsList() {
      return $this->_get(5);
    }

    /**
     * Add a new element to <groups>
     *
     * @param string $value
     * @return \Opal\SubjectCredentialsDto
     */
    public function addGroups($value) {
      return $this->_add(5, $value);
    }

    /**
     * Check if <enabled> has a value
     *
     * @return boolean
     */
    public function hasEnabled() {
      return $this->_has(6);
    }

    /**
     * Clear <enabled> value
     *
     * @return \Opal\SubjectCredentialsDto
     */
    public function clearEnabled() {
      return $this->_clear(6);
    }

    /**
     * Get <enabled> value
     *
     * @return boolean
     */
    public function getEnabled() {
      return $this->_get(6);
    }

    /**
     * Set <enabled> value
     *
     * @param boolean $value
     * @return \Opal\SubjectCredentialsDto
     */
    public function setEnabled($value) {
      return $this->_set(6, $value);
    }
  }
}

namespace Opal {

  class GroupDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string[] */
    public $subjectCredentials = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.GroupDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING subjectCredentials = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "subjectCredentials";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\GroupDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\GroupDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <subjectCredentials> has a value
     *
     * @return boolean
     */
    public function hasSubjectCredentials() {
      return $this->_has(2);
    }

    /**
     * Clear <subjectCredentials> value
     *
     * @return \Opal\GroupDto
     */
    public function clearSubjectCredentials() {
      return $this->_clear(2);
    }

    /**
     * Get <subjectCredentials> value
     *
     * @param int $idx
     * @return string
     */
    public function getSubjectCredentials($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <subjectCredentials> value
     *
     * @param string $value
     * @return \Opal\GroupDto
     */
    public function setSubjectCredentials($value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <subjectCredentials>
     *
     * @return string[]
     */
    public function getSubjectCredentialsList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <subjectCredentials>
     *
     * @param string $value
     * @return \Opal\GroupDto
     */
    public function addSubjectCredentials($value) {
      return $this->_add(2, $value);
    }
  }
}

namespace Opal {

  class SubjectProfileDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $principal = NULL;

    /**  @var string */
    public $realm = NULL;

    /**  @var string */
    public $created = NULL;

    /**  @var string */
    public $lastUpdate = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.SubjectProfileDto');

      // REQUIRED STRING principal = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "principal";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING realm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "realm";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING created = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "created";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING lastUpdate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "lastUpdate";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <principal> has a value
     *
     * @return boolean
     */
    public function hasPrincipal() {
      return $this->_has(1);
    }

    /**
     * Clear <principal> value
     *
     * @return \Opal\SubjectProfileDto
     */
    public function clearPrincipal() {
      return $this->_clear(1);
    }

    /**
     * Get <principal> value
     *
     * @return string
     */
    public function getPrincipal() {
      return $this->_get(1);
    }

    /**
     * Set <principal> value
     *
     * @param string $value
     * @return \Opal\SubjectProfileDto
     */
    public function setPrincipal($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <realm> has a value
     *
     * @return boolean
     */
    public function hasRealm() {
      return $this->_has(2);
    }

    /**
     * Clear <realm> value
     *
     * @return \Opal\SubjectProfileDto
     */
    public function clearRealm() {
      return $this->_clear(2);
    }

    /**
     * Get <realm> value
     *
     * @return string
     */
    public function getRealm() {
      return $this->_get(2);
    }

    /**
     * Set <realm> value
     *
     * @param string $value
     * @return \Opal\SubjectProfileDto
     */
    public function setRealm($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated() {
      return $this->_has(3);
    }

    /**
     * Clear <created> value
     *
     * @return \Opal\SubjectProfileDto
     */
    public function clearCreated() {
      return $this->_clear(3);
    }

    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated() {
      return $this->_get(3);
    }

    /**
     * Set <created> value
     *
     * @param string $value
     * @return \Opal\SubjectProfileDto
     */
    public function setCreated($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <lastUpdate> has a value
     *
     * @return boolean
     */
    public function hasLastUpdate() {
      return $this->_has(4);
    }

    /**
     * Clear <lastUpdate> value
     *
     * @return \Opal\SubjectProfileDto
     */
    public function clearLastUpdate() {
      return $this->_clear(4);
    }

    /**
     * Get <lastUpdate> value
     *
     * @return string
     */
    public function getLastUpdate() {
      return $this->_get(4);
    }

    /**
     * Set <lastUpdate> value
     *
     * @param string $value
     * @return \Opal\SubjectProfileDto
     */
    public function setLastUpdate($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace Opal {

  class LinkDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $rel = NULL;

    /**  @var string */
    public $link = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.LinkDto');

      // REQUIRED STRING rel = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "rel";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING link = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "link";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <rel> has a value
     *
     * @return boolean
     */
    public function hasRel() {
      return $this->_has(1);
    }

    /**
     * Clear <rel> value
     *
     * @return \Opal\LinkDto
     */
    public function clearRel() {
      return $this->_clear(1);
    }

    /**
     * Get <rel> value
     *
     * @return string
     */
    public function getRel() {
      return $this->_get(1);
    }

    /**
     * Set <rel> value
     *
     * @param string $value
     * @return \Opal\LinkDto
     */
    public function setRel($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink() {
      return $this->_has(2);
    }

    /**
     * Clear <link> value
     *
     * @return \Opal\LinkDto
     */
    public function clearLink() {
      return $this->_clear(2);
    }

    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink() {
      return $this->_get(2);
    }

    /**
     * Set <link> value
     *
     * @param string $value
     * @return \Opal\LinkDto
     */
    public function setLink($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal\BookmarkDto {

  class ResourceType extends \DrSlump\Protobuf\Enum {
    const PROJECT = 0;
    const TABLE = 1;
    const VARIABLE = 2;
  }
}
namespace Opal {

  class BookmarkDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $resource = NULL;

    /**  @var int - \Opal\BookmarkDto\ResourceType */
    public $type = NULL;

    /**  @var \Opal\LinkDto[] */
    public $links = array();

    /**  @var string */
    public $created = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.BookmarkDto');

      // REQUIRED STRING resource = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "resource";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "type";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\BookmarkDto\ResourceType';
      $descriptor->addField($f);

      // REPEATED MESSAGE links = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "links";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\LinkDto';
      $descriptor->addField($f);

      // REQUIRED STRING created = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "created";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <resource> has a value
     *
     * @return boolean
     */
    public function hasResource() {
      return $this->_has(1);
    }

    /**
     * Clear <resource> value
     *
     * @return \Opal\BookmarkDto
     */
    public function clearResource() {
      return $this->_clear(1);
    }

    /**
     * Get <resource> value
     *
     * @return string
     */
    public function getResource() {
      return $this->_get(1);
    }

    /**
     * Set <resource> value
     *
     * @param string $value
     * @return \Opal\BookmarkDto
     */
    public function setResource($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType() {
      return $this->_has(2);
    }

    /**
     * Clear <type> value
     *
     * @return \Opal\BookmarkDto
     */
    public function clearType() {
      return $this->_clear(2);
    }

    /**
     * Get <type> value
     *
     * @return int - \Opal\BookmarkDto\ResourceType
     */
    public function getType() {
      return $this->_get(2);
    }

    /**
     * Set <type> value
     *
     * @param int - \Opal\BookmarkDto\ResourceType $value
     * @return \Opal\BookmarkDto
     */
    public function setType($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks() {
      return $this->_has(3);
    }

    /**
     * Clear <links> value
     *
     * @return \Opal\BookmarkDto
     */
    public function clearLinks() {
      return $this->_clear(3);
    }

    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \Opal\LinkDto
     */
    public function getLinks($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <links> value
     *
     * @param \Opal\LinkDto $value
     * @return \Opal\BookmarkDto
     */
    public function setLinks(\Opal\LinkDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <links>
     *
     * @return \Opal\LinkDto[]
     */
    public function getLinksList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <links>
     *
     * @param \Opal\LinkDto $value
     * @return \Opal\BookmarkDto
     */
    public function addLinks(\Opal\LinkDto $value) {
      return $this->_add(3, $value);
    }

    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated() {
      return $this->_has(4);
    }

    /**
     * Clear <created> value
     *
     * @return \Opal\BookmarkDto
     */
    public function clearCreated() {
      return $this->_clear(4);
    }

    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated() {
      return $this->_get(4);
    }

    /**
     * Set <created> value
     *
     * @param string $value
     * @return \Opal\BookmarkDto
     */
    public function setCreated($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace Opal {

  class OpalEnv extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $version = NULL;

    /**  @var string */
    public $vmName = NULL;

    /**  @var string */
    public $vmVendor = NULL;

    /**  @var string */
    public $vmVersion = NULL;

    /**  @var string */
    public $javaVersion = NULL;

    /**  @var \Opal\EntryDto[] */
    public $systemProperties = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalEnv');

      // REQUIRED STRING version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "version";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING vmName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "vmName";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING vmVendor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "vmVendor";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING vmVersion = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "vmVersion";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING javaVersion = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "javaVersion";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE systemProperties = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "systemProperties";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\EntryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion() {
      return $this->_has(1);
    }

    /**
     * Clear <version> value
     *
     * @return \Opal\OpalEnv
     */
    public function clearVersion() {
      return $this->_clear(1);
    }

    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion() {
      return $this->_get(1);
    }

    /**
     * Set <version> value
     *
     * @param string $value
     * @return \Opal\OpalEnv
     */
    public function setVersion($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <vmName> has a value
     *
     * @return boolean
     */
    public function hasVmName() {
      return $this->_has(2);
    }

    /**
     * Clear <vmName> value
     *
     * @return \Opal\OpalEnv
     */
    public function clearVmName() {
      return $this->_clear(2);
    }

    /**
     * Get <vmName> value
     *
     * @return string
     */
    public function getVmName() {
      return $this->_get(2);
    }

    /**
     * Set <vmName> value
     *
     * @param string $value
     * @return \Opal\OpalEnv
     */
    public function setVmName($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <vmVendor> has a value
     *
     * @return boolean
     */
    public function hasVmVendor() {
      return $this->_has(3);
    }

    /**
     * Clear <vmVendor> value
     *
     * @return \Opal\OpalEnv
     */
    public function clearVmVendor() {
      return $this->_clear(3);
    }

    /**
     * Get <vmVendor> value
     *
     * @return string
     */
    public function getVmVendor() {
      return $this->_get(3);
    }

    /**
     * Set <vmVendor> value
     *
     * @param string $value
     * @return \Opal\OpalEnv
     */
    public function setVmVendor($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <vmVersion> has a value
     *
     * @return boolean
     */
    public function hasVmVersion() {
      return $this->_has(4);
    }

    /**
     * Clear <vmVersion> value
     *
     * @return \Opal\OpalEnv
     */
    public function clearVmVersion() {
      return $this->_clear(4);
    }

    /**
     * Get <vmVersion> value
     *
     * @return string
     */
    public function getVmVersion() {
      return $this->_get(4);
    }

    /**
     * Set <vmVersion> value
     *
     * @param string $value
     * @return \Opal\OpalEnv
     */
    public function setVmVersion($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <javaVersion> has a value
     *
     * @return boolean
     */
    public function hasJavaVersion() {
      return $this->_has(5);
    }

    /**
     * Clear <javaVersion> value
     *
     * @return \Opal\OpalEnv
     */
    public function clearJavaVersion() {
      return $this->_clear(5);
    }

    /**
     * Get <javaVersion> value
     *
     * @return string
     */
    public function getJavaVersion() {
      return $this->_get(5);
    }

    /**
     * Set <javaVersion> value
     *
     * @param string $value
     * @return \Opal\OpalEnv
     */
    public function setJavaVersion($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <systemProperties> has a value
     *
     * @return boolean
     */
    public function hasSystemProperties() {
      return $this->_has(6);
    }

    /**
     * Clear <systemProperties> value
     *
     * @return \Opal\OpalEnv
     */
    public function clearSystemProperties() {
      return $this->_clear(6);
    }

    /**
     * Get <systemProperties> value
     *
     * @param int $idx
     * @return \Opal\EntryDto
     */
    public function getSystemProperties($idx = NULL) {
      return $this->_get(6, $idx);
    }

    /**
     * Set <systemProperties> value
     *
     * @param \Opal\EntryDto $value
     * @return \Opal\OpalEnv
     */
    public function setSystemProperties(\Opal\EntryDto $value, $idx = NULL) {
      return $this->_set(6, $value, $idx);
    }

    /**
     * Get all elements of <systemProperties>
     *
     * @return \Opal\EntryDto[]
     */
    public function getSystemPropertiesList() {
      return $this->_get(6);
    }

    /**
     * Add a new element to <systemProperties>
     *
     * @param \Opal\EntryDto $value
     * @return \Opal\OpalEnv
     */
    public function addSystemProperties(\Opal\EntryDto $value) {
      return $this->_add(6, $value);
    }
  }
}

namespace Opal\OpalStatus {

  class MemoryUsage extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $init = NULL;

    /**  @var int */
    public $used = NULL;

    /**  @var int */
    public $committed = NULL;

    /**  @var int */
    public $max = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalStatus.MemoryUsage');

      // REQUIRED INT64 init = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "init";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 used = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "used";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 committed = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "committed";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 max = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "max";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <init> has a value
     *
     * @return boolean
     */
    public function hasInit() {
      return $this->_has(1);
    }

    /**
     * Clear <init> value
     *
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function clearInit() {
      return $this->_clear(1);
    }

    /**
     * Get <init> value
     *
     * @return int
     */
    public function getInit() {
      return $this->_get(1);
    }

    /**
     * Set <init> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function setInit($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <used> has a value
     *
     * @return boolean
     */
    public function hasUsed() {
      return $this->_has(2);
    }

    /**
     * Clear <used> value
     *
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function clearUsed() {
      return $this->_clear(2);
    }

    /**
     * Get <used> value
     *
     * @return int
     */
    public function getUsed() {
      return $this->_get(2);
    }

    /**
     * Set <used> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function setUsed($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <committed> has a value
     *
     * @return boolean
     */
    public function hasCommitted() {
      return $this->_has(3);
    }

    /**
     * Clear <committed> value
     *
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function clearCommitted() {
      return $this->_clear(3);
    }

    /**
     * Get <committed> value
     *
     * @return int
     */
    public function getCommitted() {
      return $this->_get(3);
    }

    /**
     * Set <committed> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function setCommitted($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax() {
      return $this->_has(4);
    }

    /**
     * Clear <max> value
     *
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function clearMax() {
      return $this->_clear(4);
    }

    /**
     * Get <max> value
     *
     * @return int
     */
    public function getMax() {
      return $this->_get(4);
    }

    /**
     * Set <max> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function setMax($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace Opal\OpalStatus {

  class ThreadsUsage extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = NULL;

    /**  @var int */
    public $peak = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalStatus.ThreadsUsage');

      // REQUIRED INT64 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 peak = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "peak";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(1);
    }

    /**
     * Clear <count> value
     *
     * @return \Opal\OpalStatus\ThreadsUsage
     */
    public function clearCount() {
      return $this->_clear(1);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(1);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\ThreadsUsage
     */
    public function setCount($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <peak> has a value
     *
     * @return boolean
     */
    public function hasPeak() {
      return $this->_has(2);
    }

    /**
     * Clear <peak> value
     *
     * @return \Opal\OpalStatus\ThreadsUsage
     */
    public function clearPeak() {
      return $this->_clear(2);
    }

    /**
     * Get <peak> value
     *
     * @return int
     */
    public function getPeak() {
      return $this->_get(2);
    }

    /**
     * Set <peak> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\ThreadsUsage
     */
    public function setPeak($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal\OpalStatus {

  class GarbageCollectorUsage extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var int */
    public $collectionCount = NULL;

    /**  @var int */
    public $collectionTime = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalStatus.GarbageCollectorUsage');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 collectionCount = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "collectionCount";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 collectionTime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "collectionTime";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\OpalStatus\GarbageCollectorUsage
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\OpalStatus\GarbageCollectorUsage
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <collectionCount> has a value
     *
     * @return boolean
     */
    public function hasCollectionCount() {
      return $this->_has(2);
    }

    /**
     * Clear <collectionCount> value
     *
     * @return \Opal\OpalStatus\GarbageCollectorUsage
     */
    public function clearCollectionCount() {
      return $this->_clear(2);
    }

    /**
     * Get <collectionCount> value
     *
     * @return int
     */
    public function getCollectionCount() {
      return $this->_get(2);
    }

    /**
     * Set <collectionCount> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\GarbageCollectorUsage
     */
    public function setCollectionCount($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <collectionTime> has a value
     *
     * @return boolean
     */
    public function hasCollectionTime() {
      return $this->_has(3);
    }

    /**
     * Clear <collectionTime> value
     *
     * @return \Opal\OpalStatus\GarbageCollectorUsage
     */
    public function clearCollectionTime() {
      return $this->_clear(3);
    }

    /**
     * Get <collectionTime> value
     *
     * @return int
     */
    public function getCollectionTime() {
      return $this->_get(3);
    }

    /**
     * Set <collectionTime> value
     *
     * @param int $value
     * @return \Opal\OpalStatus\GarbageCollectorUsage
     */
    public function setCollectionTime($value) {
      return $this->_set(3, $value);
    }
  }
}

namespace Opal {

  class OpalStatus extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $timestamp = NULL;

    /**  @var int */
    public $uptime = NULL;

    /**  @var \Opal\OpalStatus\MemoryUsage */
    public $heapMemory = NULL;

    /**  @var \Opal\OpalStatus\MemoryUsage */
    public $nonHeapMemory = NULL;

    /**  @var \Opal\OpalStatus\ThreadsUsage */
    public $threads = NULL;

    /**  @var \Opal\OpalStatus\GarbageCollectorUsage[] */
    public $gcs = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalStatus');

      // REQUIRED INT64 timestamp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "timestamp";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 uptime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "uptime";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE heapMemory = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "heapMemory";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\OpalStatus\MemoryUsage';
      $descriptor->addField($f);

      // REQUIRED MESSAGE nonHeapMemory = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "nonHeapMemory";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\OpalStatus\MemoryUsage';
      $descriptor->addField($f);

      // REQUIRED MESSAGE threads = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "threads";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\OpalStatus\ThreadsUsage';
      $descriptor->addField($f);

      // REPEATED MESSAGE gcs = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "gcs";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\OpalStatus\GarbageCollectorUsage';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp() {
      return $this->_has(1);
    }

    /**
     * Clear <timestamp> value
     *
     * @return \Opal\OpalStatus
     */
    public function clearTimestamp() {
      return $this->_clear(1);
    }

    /**
     * Get <timestamp> value
     *
     * @return int
     */
    public function getTimestamp() {
      return $this->_get(1);
    }

    /**
     * Set <timestamp> value
     *
     * @param int $value
     * @return \Opal\OpalStatus
     */
    public function setTimestamp($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <uptime> has a value
     *
     * @return boolean
     */
    public function hasUptime() {
      return $this->_has(2);
    }

    /**
     * Clear <uptime> value
     *
     * @return \Opal\OpalStatus
     */
    public function clearUptime() {
      return $this->_clear(2);
    }

    /**
     * Get <uptime> value
     *
     * @return int
     */
    public function getUptime() {
      return $this->_get(2);
    }

    /**
     * Set <uptime> value
     *
     * @param int $value
     * @return \Opal\OpalStatus
     */
    public function setUptime($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <heapMemory> has a value
     *
     * @return boolean
     */
    public function hasHeapMemory() {
      return $this->_has(3);
    }

    /**
     * Clear <heapMemory> value
     *
     * @return \Opal\OpalStatus
     */
    public function clearHeapMemory() {
      return $this->_clear(3);
    }

    /**
     * Get <heapMemory> value
     *
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function getHeapMemory() {
      return $this->_get(3);
    }

    /**
     * Set <heapMemory> value
     *
     * @param \Opal\OpalStatus\MemoryUsage $value
     * @return \Opal\OpalStatus
     */
    public function setHeapMemory(\Opal\OpalStatus\MemoryUsage $value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <nonHeapMemory> has a value
     *
     * @return boolean
     */
    public function hasNonHeapMemory() {
      return $this->_has(4);
    }

    /**
     * Clear <nonHeapMemory> value
     *
     * @return \Opal\OpalStatus
     */
    public function clearNonHeapMemory() {
      return $this->_clear(4);
    }

    /**
     * Get <nonHeapMemory> value
     *
     * @return \Opal\OpalStatus\MemoryUsage
     */
    public function getNonHeapMemory() {
      return $this->_get(4);
    }

    /**
     * Set <nonHeapMemory> value
     *
     * @param \Opal\OpalStatus\MemoryUsage $value
     * @return \Opal\OpalStatus
     */
    public function setNonHeapMemory(\Opal\OpalStatus\MemoryUsage $value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <threads> has a value
     *
     * @return boolean
     */
    public function hasThreads() {
      return $this->_has(5);
    }

    /**
     * Clear <threads> value
     *
     * @return \Opal\OpalStatus
     */
    public function clearThreads() {
      return $this->_clear(5);
    }

    /**
     * Get <threads> value
     *
     * @return \Opal\OpalStatus\ThreadsUsage
     */
    public function getThreads() {
      return $this->_get(5);
    }

    /**
     * Set <threads> value
     *
     * @param \Opal\OpalStatus\ThreadsUsage $value
     * @return \Opal\OpalStatus
     */
    public function setThreads(\Opal\OpalStatus\ThreadsUsage $value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <gcs> has a value
     *
     * @return boolean
     */
    public function hasGcs() {
      return $this->_has(6);
    }

    /**
     * Clear <gcs> value
     *
     * @return \Opal\OpalStatus
     */
    public function clearGcs() {
      return $this->_clear(6);
    }

    /**
     * Get <gcs> value
     *
     * @param int $idx
     * @return \Opal\OpalStatus\GarbageCollectorUsage
     */
    public function getGcs($idx = NULL) {
      return $this->_get(6, $idx);
    }

    /**
     * Set <gcs> value
     *
     * @param \Opal\OpalStatus\GarbageCollectorUsage $value
     * @return \Opal\OpalStatus
     */
    public function setGcs(\Opal\OpalStatus\GarbageCollectorUsage $value, $idx = NULL) {
      return $this->_set(6, $value, $idx);
    }

    /**
     * Get all elements of <gcs>
     *
     * @return \Opal\OpalStatus\GarbageCollectorUsage[]
     */
    public function getGcsList() {
      return $this->_get(6);
    }

    /**
     * Add a new element to <gcs>
     *
     * @param \Opal\OpalStatus\GarbageCollectorUsage $value
     * @return \Opal\OpalStatus
     */
    public function addGcs(\Opal\OpalStatus\GarbageCollectorUsage $value) {
      return $this->_add(6, $value);
    }
  }
}

namespace Opal {

  class GeneralConf extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = "Opal";

    /**  @var string[] */
    public $languages = array();

    /**  @var string */
    public $defaultCharSet = "ISO-8859-1";

    /**  @var string */
    public $publicURL = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.GeneralConf');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = "Opal";
      $descriptor->addField($f);

      // REPEATED STRING languages = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "languages";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING defaultCharSet = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "defaultCharSet";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = "ISO-8859-1";
      $descriptor->addField($f);

      // OPTIONAL STRING publicURL = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "publicURL";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\GeneralConf
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\GeneralConf
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <languages> has a value
     *
     * @return boolean
     */
    public function hasLanguages() {
      return $this->_has(2);
    }

    /**
     * Clear <languages> value
     *
     * @return \Opal\GeneralConf
     */
    public function clearLanguages() {
      return $this->_clear(2);
    }

    /**
     * Get <languages> value
     *
     * @param int $idx
     * @return string
     */
    public function getLanguages($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <languages> value
     *
     * @param string $value
     * @return \Opal\GeneralConf
     */
    public function setLanguages($value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <languages>
     *
     * @return string[]
     */
    public function getLanguagesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <languages>
     *
     * @param string $value
     * @return \Opal\GeneralConf
     */
    public function addLanguages($value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <defaultCharSet> has a value
     *
     * @return boolean
     */
    public function hasDefaultCharSet() {
      return $this->_has(3);
    }

    /**
     * Clear <defaultCharSet> value
     *
     * @return \Opal\GeneralConf
     */
    public function clearDefaultCharSet() {
      return $this->_clear(3);
    }

    /**
     * Get <defaultCharSet> value
     *
     * @return string
     */
    public function getDefaultCharSet() {
      return $this->_get(3);
    }

    /**
     * Set <defaultCharSet> value
     *
     * @param string $value
     * @return \Opal\GeneralConf
     */
    public function setDefaultCharSet($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <publicURL> has a value
     *
     * @return boolean
     */
    public function hasPublicURL() {
      return $this->_has(4);
    }

    /**
     * Clear <publicURL> value
     *
     * @return \Opal\GeneralConf
     */
    public function clearPublicURL() {
      return $this->_clear(4);
    }

    /**
     * Get <publicURL> value
     *
     * @return string
     */
    public function getPublicURL() {
      return $this->_get(4);
    }

    /**
     * Set <publicURL> value
     *
     * @param string $value
     * @return \Opal\GeneralConf
     */
    public function setPublicURL($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace Opal\AttributeConf {

  class Attr extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var string[] */
    public $values = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.AttributeConf.Attr');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "values";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\AttributeConf\Attr
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\AttributeConf\Attr
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues() {
      return $this->_has(2);
    }

    /**
     * Clear <values> value
     *
     * @return \Opal\AttributeConf\Attr
     */
    public function clearValues() {
      return $this->_clear(2);
    }

    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <values> value
     *
     * @param string $value
     * @return \Opal\AttributeConf\Attr
     */
    public function setValues($value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \Opal\AttributeConf\Attr
     */
    public function addValues($value) {
      return $this->_add(2, $value);
    }
  }
}

namespace Opal {

  class AttributeConf extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $namespace = "opal";

    /**  @var string */
    public $description = NULL;

    /**  @var \Opal\AttributeConf\Attr[] */
    public $conf = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.AttributeConf');

      // REQUIRED STRING namespace = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "namespace";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = "opal";
      $descriptor->addField($f);

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "description";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE conf = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "conf";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\AttributeConf\Attr';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace() {
      return $this->_has(1);
    }

    /**
     * Clear <namespace> value
     *
     * @return \Opal\AttributeConf
     */
    public function clearNamespace() {
      return $this->_clear(1);
    }

    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace() {
      return $this->_get(1);
    }

    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \Opal\AttributeConf
     */
    public function setNamespace($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription() {
      return $this->_has(2);
    }

    /**
     * Clear <description> value
     *
     * @return \Opal\AttributeConf
     */
    public function clearDescription() {
      return $this->_clear(2);
    }

    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription() {
      return $this->_get(2);
    }

    /**
     * Set <description> value
     *
     * @param string $value
     * @return \Opal\AttributeConf
     */
    public function setDescription($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <conf> has a value
     *
     * @return boolean
     */
    public function hasConf() {
      return $this->_has(3);
    }

    /**
     * Clear <conf> value
     *
     * @return \Opal\AttributeConf
     */
    public function clearConf() {
      return $this->_clear(3);
    }

    /**
     * Get <conf> value
     *
     * @param int $idx
     * @return \Opal\AttributeConf\Attr
     */
    public function getConf($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <conf> value
     *
     * @param \Opal\AttributeConf\Attr $value
     * @return \Opal\AttributeConf
     */
    public function setConf(\Opal\AttributeConf\Attr $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <conf>
     *
     * @return \Opal\AttributeConf\Attr[]
     */
    public function getConfList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <conf>
     *
     * @param \Opal\AttributeConf\Attr $value
     * @return \Opal\AttributeConf
     */
    public function addConf(\Opal\AttributeConf\Attr $value) {
      return $this->_add(3, $value);
    }
  }
}

namespace Opal {

  class LocaleTextDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $locale = NULL;

    /**  @var string */
    public $text = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.LocaleTextDto');

      // REQUIRED STRING locale = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "locale";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING text = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "text";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <locale> has a value
     *
     * @return boolean
     */
    public function hasLocale() {
      return $this->_has(1);
    }

    /**
     * Clear <locale> value
     *
     * @return \Opal\LocaleTextDto
     */
    public function clearLocale() {
      return $this->_clear(1);
    }

    /**
     * Get <locale> value
     *
     * @return string
     */
    public function getLocale() {
      return $this->_get(1);
    }

    /**
     * Set <locale> value
     *
     * @param string $value
     * @return \Opal\LocaleTextDto
     */
    public function setLocale($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText() {
      return $this->_has(2);
    }

    /**
     * Clear <text> value
     *
     * @return \Opal\LocaleTextDto
     */
    public function clearText() {
      return $this->_clear(2);
    }

    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText() {
      return $this->_get(2);
    }

    /**
     * Set <text> value
     *
     * @param string $value
     * @return \Opal\LocaleTextDto
     */
    public function setText($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Opal {

  class TermDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var \Opal\LocaleTextDto[] */
    public $titles = array();

    /**  @var \Opal\LocaleTextDto[] */
    public $descriptions = array();

    /**  @var \Opal\TermDto[] */
    public $terms = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.TermDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE titles = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "titles";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\LocaleTextDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE descriptions = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "descriptions";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\LocaleTextDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE terms = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "terms";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\TermDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\TermDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\TermDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <titles> has a value
     *
     * @return boolean
     */
    public function hasTitles() {
      return $this->_has(2);
    }

    /**
     * Clear <titles> value
     *
     * @return \Opal\TermDto
     */
    public function clearTitles() {
      return $this->_clear(2);
    }

    /**
     * Get <titles> value
     *
     * @param int $idx
     * @return \Opal\LocaleTextDto
     */
    public function getTitles($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <titles> value
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TermDto
     */
    public function setTitles(\Opal\LocaleTextDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <titles>
     *
     * @return \Opal\LocaleTextDto[]
     */
    public function getTitlesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <titles>
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TermDto
     */
    public function addTitles(\Opal\LocaleTextDto $value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <descriptions> has a value
     *
     * @return boolean
     */
    public function hasDescriptions() {
      return $this->_has(3);
    }

    /**
     * Clear <descriptions> value
     *
     * @return \Opal\TermDto
     */
    public function clearDescriptions() {
      return $this->_clear(3);
    }

    /**
     * Get <descriptions> value
     *
     * @param int $idx
     * @return \Opal\LocaleTextDto
     */
    public function getDescriptions($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <descriptions> value
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TermDto
     */
    public function setDescriptions(\Opal\LocaleTextDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <descriptions>
     *
     * @return \Opal\LocaleTextDto[]
     */
    public function getDescriptionsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <descriptions>
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TermDto
     */
    public function addDescriptions(\Opal\LocaleTextDto $value) {
      return $this->_add(3, $value);
    }

    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms() {
      return $this->_has(4);
    }

    /**
     * Clear <terms> value
     *
     * @return \Opal\TermDto
     */
    public function clearTerms() {
      return $this->_clear(4);
    }

    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return \Opal\TermDto
     */
    public function getTerms($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <terms> value
     *
     * @param \Opal\TermDto $value
     * @return \Opal\TermDto
     */
    public function setTerms(\Opal\TermDto $value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <terms>
     *
     * @return \Opal\TermDto[]
     */
    public function getTermsList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <terms>
     *
     * @param \Opal\TermDto $value
     * @return \Opal\TermDto
     */
    public function addTerms(\Opal\TermDto $value) {
      return $this->_add(4, $value);
    }
  }
}

namespace Opal {

  class VocabularyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var \Opal\LocaleTextDto[] */
    public $titles = array();

    /**  @var \Opal\LocaleTextDto[] */
    public $descriptions = array();

    /**  @var \Opal\TermDto[] */
    public $terms = array();

    /**  @var boolean */
    public $repeatable = FALSE;

    /**  @var string */
    public $taxonomyName = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.VocabularyDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE titles = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "titles";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\LocaleTextDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE descriptions = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "descriptions";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\LocaleTextDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE terms = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "terms";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\TermDto';
      $descriptor->addField($f);

      // REQUIRED BOOL repeatable = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "repeatable";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = FALSE;
      $descriptor->addField($f);

      // REQUIRED STRING taxonomyName = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "taxonomyName";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\VocabularyDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\VocabularyDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <titles> has a value
     *
     * @return boolean
     */
    public function hasTitles() {
      return $this->_has(2);
    }

    /**
     * Clear <titles> value
     *
     * @return \Opal\VocabularyDto
     */
    public function clearTitles() {
      return $this->_clear(2);
    }

    /**
     * Get <titles> value
     *
     * @param int $idx
     * @return \Opal\LocaleTextDto
     */
    public function getTitles($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <titles> value
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\VocabularyDto
     */
    public function setTitles(\Opal\LocaleTextDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <titles>
     *
     * @return \Opal\LocaleTextDto[]
     */
    public function getTitlesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <titles>
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\VocabularyDto
     */
    public function addTitles(\Opal\LocaleTextDto $value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <descriptions> has a value
     *
     * @return boolean
     */
    public function hasDescriptions() {
      return $this->_has(3);
    }

    /**
     * Clear <descriptions> value
     *
     * @return \Opal\VocabularyDto
     */
    public function clearDescriptions() {
      return $this->_clear(3);
    }

    /**
     * Get <descriptions> value
     *
     * @param int $idx
     * @return \Opal\LocaleTextDto
     */
    public function getDescriptions($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <descriptions> value
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\VocabularyDto
     */
    public function setDescriptions(\Opal\LocaleTextDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <descriptions>
     *
     * @return \Opal\LocaleTextDto[]
     */
    public function getDescriptionsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <descriptions>
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\VocabularyDto
     */
    public function addDescriptions(\Opal\LocaleTextDto $value) {
      return $this->_add(3, $value);
    }

    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms() {
      return $this->_has(4);
    }

    /**
     * Clear <terms> value
     *
     * @return \Opal\VocabularyDto
     */
    public function clearTerms() {
      return $this->_clear(4);
    }

    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return \Opal\TermDto
     */
    public function getTerms($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <terms> value
     *
     * @param \Opal\TermDto $value
     * @return \Opal\VocabularyDto
     */
    public function setTerms(\Opal\TermDto $value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <terms>
     *
     * @return \Opal\TermDto[]
     */
    public function getTermsList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <terms>
     *
     * @param \Opal\TermDto $value
     * @return \Opal\VocabularyDto
     */
    public function addTerms(\Opal\TermDto $value) {
      return $this->_add(4, $value);
    }

    /**
     * Check if <repeatable> has a value
     *
     * @return boolean
     */
    public function hasRepeatable() {
      return $this->_has(5);
    }

    /**
     * Clear <repeatable> value
     *
     * @return \Opal\VocabularyDto
     */
    public function clearRepeatable() {
      return $this->_clear(5);
    }

    /**
     * Get <repeatable> value
     *
     * @return boolean
     */
    public function getRepeatable() {
      return $this->_get(5);
    }

    /**
     * Set <repeatable> value
     *
     * @param boolean $value
     * @return \Opal\VocabularyDto
     */
    public function setRepeatable($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <taxonomyName> has a value
     *
     * @return boolean
     */
    public function hasTaxonomyName() {
      return $this->_has(6);
    }

    /**
     * Clear <taxonomyName> value
     *
     * @return \Opal\VocabularyDto
     */
    public function clearTaxonomyName() {
      return $this->_clear(6);
    }

    /**
     * Get <taxonomyName> value
     *
     * @return string
     */
    public function getTaxonomyName() {
      return $this->_get(6);
    }

    /**
     * Set <taxonomyName> value
     *
     * @param string $value
     * @return \Opal\VocabularyDto
     */
    public function setTaxonomyName($value) {
      return $this->_set(6, $value);
    }
  }
}

namespace Opal {

  class TaxonomyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = NULL;

    /**  @var \Opal\LocaleTextDto[] */
    public $titles = array();

    /**  @var \Opal\LocaleTextDto[] */
    public $descriptions = array();

    /**  @var string[] */
    public $vocabularies = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.TaxonomyDto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "name";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE titles = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "titles";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\LocaleTextDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE descriptions = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "descriptions";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\LocaleTextDto';
      $descriptor->addField($f);

      // REPEATED STRING vocabularies = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "vocabularies";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName() {
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \Opal\TaxonomyDto
     */
    public function clearName() {
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName() {
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Opal\TaxonomyDto
     */
    public function setName($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <titles> has a value
     *
     * @return boolean
     */
    public function hasTitles() {
      return $this->_has(2);
    }

    /**
     * Clear <titles> value
     *
     * @return \Opal\TaxonomyDto
     */
    public function clearTitles() {
      return $this->_clear(2);
    }

    /**
     * Get <titles> value
     *
     * @param int $idx
     * @return \Opal\LocaleTextDto
     */
    public function getTitles($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <titles> value
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TaxonomyDto
     */
    public function setTitles(\Opal\LocaleTextDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <titles>
     *
     * @return \Opal\LocaleTextDto[]
     */
    public function getTitlesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <titles>
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TaxonomyDto
     */
    public function addTitles(\Opal\LocaleTextDto $value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <descriptions> has a value
     *
     * @return boolean
     */
    public function hasDescriptions() {
      return $this->_has(3);
    }

    /**
     * Clear <descriptions> value
     *
     * @return \Opal\TaxonomyDto
     */
    public function clearDescriptions() {
      return $this->_clear(3);
    }

    /**
     * Get <descriptions> value
     *
     * @param int $idx
     * @return \Opal\LocaleTextDto
     */
    public function getDescriptions($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <descriptions> value
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TaxonomyDto
     */
    public function setDescriptions(\Opal\LocaleTextDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <descriptions>
     *
     * @return \Opal\LocaleTextDto[]
     */
    public function getDescriptionsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <descriptions>
     *
     * @param \Opal\LocaleTextDto $value
     * @return \Opal\TaxonomyDto
     */
    public function addDescriptions(\Opal\LocaleTextDto $value) {
      return $this->_add(3, $value);
    }

    /**
     * Check if <vocabularies> has a value
     *
     * @return boolean
     */
    public function hasVocabularies() {
      return $this->_has(4);
    }

    /**
     * Clear <vocabularies> value
     *
     * @return \Opal\TaxonomyDto
     */
    public function clearVocabularies() {
      return $this->_clear(4);
    }

    /**
     * Get <vocabularies> value
     *
     * @param int $idx
     * @return string
     */
    public function getVocabularies($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <vocabularies> value
     *
     * @param string $value
     * @return \Opal\TaxonomyDto
     */
    public function setVocabularies($value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <vocabularies>
     *
     * @return string[]
     */
    public function getVocabulariesList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <vocabularies>
     *
     * @param string $value
     * @return \Opal\TaxonomyDto
     */
    public function addVocabularies($value) {
      return $this->_add(4, $value);
    }
  }
}

namespace Opal {

  class OpalConf extends \DrSlump\Protobuf\Message {

    /**  @var \Opal\GeneralConf */
    public $general = NULL;

    /**  @var \Opal\TaxonomyDto[] */
    public $taxonomies = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.OpalConf');

      // REQUIRED MESSAGE general = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "general";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Opal\GeneralConf';
      $descriptor->addField($f);

      // REPEATED MESSAGE taxonomies = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "taxonomies";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\TaxonomyDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <general> has a value
     *
     * @return boolean
     */
    public function hasGeneral() {
      return $this->_has(1);
    }

    /**
     * Clear <general> value
     *
     * @return \Opal\OpalConf
     */
    public function clearGeneral() {
      return $this->_clear(1);
    }

    /**
     * Get <general> value
     *
     * @return \Opal\GeneralConf
     */
    public function getGeneral() {
      return $this->_get(1);
    }

    /**
     * Set <general> value
     *
     * @param \Opal\GeneralConf $value
     * @return \Opal\OpalConf
     */
    public function setGeneral(\Opal\GeneralConf $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <taxonomies> has a value
     *
     * @return boolean
     */
    public function hasTaxonomies() {
      return $this->_has(2);
    }

    /**
     * Clear <taxonomies> value
     *
     * @return \Opal\OpalConf
     */
    public function clearTaxonomies() {
      return $this->_clear(2);
    }

    /**
     * Get <taxonomies> value
     *
     * @param int $idx
     * @return \Opal\TaxonomyDto
     */
    public function getTaxonomies($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <taxonomies> value
     *
     * @param \Opal\TaxonomyDto $value
     * @return \Opal\OpalConf
     */
    public function setTaxonomies(\Opal\TaxonomyDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <taxonomies>
     *
     * @return \Opal\TaxonomyDto[]
     */
    public function getTaxonomiesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <taxonomies>
     *
     * @param \Opal\TaxonomyDto $value
     * @return \Opal\OpalConf
     */
    public function addTaxonomies(\Opal\TaxonomyDto $value) {
      return $this->_add(2, $value);
    }
  }
}

namespace Opal {

  class VcsCommitInfosDto extends \DrSlump\Protobuf\Message {

    /**  @var \Opal\VcsCommitInfoDto[] */
    public $commitInfos = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.VcsCommitInfosDto');

      // REPEATED MESSAGE commitInfos = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "commitInfos";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\VcsCommitInfoDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <commitInfos> has a value
     *
     * @return boolean
     */
    public function hasCommitInfos() {
      return $this->_has(1);
    }

    /**
     * Clear <commitInfos> value
     *
     * @return \Opal\VcsCommitInfosDto
     */
    public function clearCommitInfos() {
      return $this->_clear(1);
    }

    /**
     * Get <commitInfos> value
     *
     * @param int $idx
     * @return \Opal\VcsCommitInfoDto
     */
    public function getCommitInfos($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <commitInfos> value
     *
     * @param \Opal\VcsCommitInfoDto $value
     * @return \Opal\VcsCommitInfosDto
     */
    public function setCommitInfos(\Opal\VcsCommitInfoDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <commitInfos>
     *
     * @return \Opal\VcsCommitInfoDto[]
     */
    public function getCommitInfosList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <commitInfos>
     *
     * @param \Opal\VcsCommitInfoDto $value
     * @return \Opal\VcsCommitInfosDto
     */
    public function addCommitInfos(\Opal\VcsCommitInfoDto $value) {
      return $this->_add(1, $value);
    }
  }
}

namespace Opal {

  class VcsCommitInfoDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $author = NULL;

    /**  @var string */
    public $date = NULL;

    /**  @var string */
    public $comment = NULL;

    /**  @var string */
    public $commitId = NULL;

    /**  @var string[] */
    public $diffEntries = array();

    /**  @var string */
    public $blob = NULL;

    /**  @var boolean */
    public $isHead = FALSE;

    /**  @var boolean */
    public $isCurrent = FALSE;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Opal.VcsCommitInfoDto');

      // REQUIRED STRING author = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "author";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING date = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "date";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING comment = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "comment";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING commitId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "commitId";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING diffEntries = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "diffEntries";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING blob = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "blob";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isHead = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 7;
      $f->name = "isHead";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default = FALSE;
      $descriptor->addField($f);

      // OPTIONAL BOOL isCurrent = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 8;
      $f->name = "isCurrent";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default = FALSE;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <author> has a value
     *
     * @return boolean
     */
    public function hasAuthor() {
      return $this->_has(1);
    }

    /**
     * Clear <author> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearAuthor() {
      return $this->_clear(1);
    }

    /**
     * Get <author> value
     *
     * @return string
     */
    public function getAuthor() {
      return $this->_get(1);
    }

    /**
     * Set <author> value
     *
     * @param string $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setAuthor($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <date> has a value
     *
     * @return boolean
     */
    public function hasDate() {
      return $this->_has(2);
    }

    /**
     * Clear <date> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearDate() {
      return $this->_clear(2);
    }

    /**
     * Get <date> value
     *
     * @return string
     */
    public function getDate() {
      return $this->_get(2);
    }

    /**
     * Set <date> value
     *
     * @param string $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setDate($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment() {
      return $this->_has(3);
    }

    /**
     * Clear <comment> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearComment() {
      return $this->_clear(3);
    }

    /**
     * Get <comment> value
     *
     * @return string
     */
    public function getComment() {
      return $this->_get(3);
    }

    /**
     * Set <comment> value
     *
     * @param string $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setComment($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <commitId> has a value
     *
     * @return boolean
     */
    public function hasCommitId() {
      return $this->_has(4);
    }

    /**
     * Clear <commitId> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearCommitId() {
      return $this->_clear(4);
    }

    /**
     * Get <commitId> value
     *
     * @return string
     */
    public function getCommitId() {
      return $this->_get(4);
    }

    /**
     * Set <commitId> value
     *
     * @param string $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setCommitId($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <diffEntries> has a value
     *
     * @return boolean
     */
    public function hasDiffEntries() {
      return $this->_has(5);
    }

    /**
     * Clear <diffEntries> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearDiffEntries() {
      return $this->_clear(5);
    }

    /**
     * Get <diffEntries> value
     *
     * @param int $idx
     * @return string
     */
    public function getDiffEntries($idx = NULL) {
      return $this->_get(5, $idx);
    }

    /**
     * Set <diffEntries> value
     *
     * @param string $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setDiffEntries($value, $idx = NULL) {
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <diffEntries>
     *
     * @return string[]
     */
    public function getDiffEntriesList() {
      return $this->_get(5);
    }

    /**
     * Add a new element to <diffEntries>
     *
     * @param string $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function addDiffEntries($value) {
      return $this->_add(5, $value);
    }

    /**
     * Check if <blob> has a value
     *
     * @return boolean
     */
    public function hasBlob() {
      return $this->_has(6);
    }

    /**
     * Clear <blob> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearBlob() {
      return $this->_clear(6);
    }

    /**
     * Get <blob> value
     *
     * @return string
     */
    public function getBlob() {
      return $this->_get(6);
    }

    /**
     * Set <blob> value
     *
     * @param string $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setBlob($value) {
      return $this->_set(6, $value);
    }

    /**
     * Check if <isHead> has a value
     *
     * @return boolean
     */
    public function hasIsHead() {
      return $this->_has(7);
    }

    /**
     * Clear <isHead> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearIsHead() {
      return $this->_clear(7);
    }

    /**
     * Get <isHead> value
     *
     * @return boolean
     */
    public function getIsHead() {
      return $this->_get(7);
    }

    /**
     * Set <isHead> value
     *
     * @param boolean $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setIsHead($value) {
      return $this->_set(7, $value);
    }

    /**
     * Check if <isCurrent> has a value
     *
     * @return boolean
     */
    public function hasIsCurrent() {
      return $this->_has(8);
    }

    /**
     * Clear <isCurrent> value
     *
     * @return \Opal\VcsCommitInfoDto
     */
    public function clearIsCurrent() {
      return $this->_clear(8);
    }

    /**
     * Get <isCurrent> value
     *
     * @return boolean
     */
    public function getIsCurrent() {
      return $this->_get(8);
    }

    /**
     * Set <isCurrent> value
     *
     * @param boolean $value
     * @return \Opal\VcsCommitInfoDto
     */
    public function setIsCurrent($value) {
      return $this->_set(8, $value);
    }
  }
}

namespace {
  \Opal\ServiceCfgDto::extension(function () {
    // OPTIONAL MESSAGE Opal.ESCfgDto.params = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1000;
    $f->name = "Opal.ESCfgDto.params";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Opal\ESCfgDto';
    return $f;
  });
}