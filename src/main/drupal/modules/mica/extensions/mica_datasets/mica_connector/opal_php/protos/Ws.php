<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Ws.proto
//   Date: 2014-03-10 20:41:21

namespace Ws {

  class ClientErrorDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = NULL;

    /**  @var string */
    public $status = NULL;

    /**  @var string[] */
    public $arguments = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Ws.ClientErrorDto');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "code";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "status";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING arguments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "arguments";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode() {
      return $this->_has(1);
    }

    /**
     * Clear <code> value
     *
     * @return \Ws\ClientErrorDto
     */
    public function clearCode() {
      return $this->_clear(1);
    }

    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode() {
      return $this->_get(1);
    }

    /**
     * Set <code> value
     *
     * @param int $value
     * @return \Ws\ClientErrorDto
     */
    public function setCode($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus() {
      return $this->_has(2);
    }

    /**
     * Clear <status> value
     *
     * @return \Ws\ClientErrorDto
     */
    public function clearStatus() {
      return $this->_clear(2);
    }

    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus() {
      return $this->_get(2);
    }

    /**
     * Set <status> value
     *
     * @param string $value
     * @return \Ws\ClientErrorDto
     */
    public function setStatus($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <arguments> has a value
     *
     * @return boolean
     */
    public function hasArguments() {
      return $this->_has(3);
    }

    /**
     * Clear <arguments> value
     *
     * @return \Ws\ClientErrorDto
     */
    public function clearArguments() {
      return $this->_clear(3);
    }

    /**
     * Get <arguments> value
     *
     * @param int $idx
     * @return string
     */
    public function getArguments($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <arguments> value
     *
     * @param string $value
     * @return \Ws\ClientErrorDto
     */
    public function setArguments($value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <arguments>
     *
     * @return string[]
     */
    public function getArgumentsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <arguments>
     *
     * @param string $value
     * @return \Ws\ClientErrorDto
     */
    public function addArguments($value) {
      return $this->_add(3, $value);
    }
  }
}

namespace Ws {

  class ServerErrorDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = NULL;

    /**  @var string */
    public $status = NULL;

    /**  @var string[] */
    public $arguments = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Ws.ServerErrorDto');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "code";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "status";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING arguments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "arguments";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode() {
      return $this->_has(1);
    }

    /**
     * Clear <code> value
     *
     * @return \Ws\ServerErrorDto
     */
    public function clearCode() {
      return $this->_clear(1);
    }

    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode() {
      return $this->_get(1);
    }

    /**
     * Set <code> value
     *
     * @param int $value
     * @return \Ws\ServerErrorDto
     */
    public function setCode($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus() {
      return $this->_has(2);
    }

    /**
     * Clear <status> value
     *
     * @return \Ws\ServerErrorDto
     */
    public function clearStatus() {
      return $this->_clear(2);
    }

    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus() {
      return $this->_get(2);
    }

    /**
     * Set <status> value
     *
     * @param string $value
     * @return \Ws\ServerErrorDto
     */
    public function setStatus($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <arguments> has a value
     *
     * @return boolean
     */
    public function hasArguments() {
      return $this->_has(3);
    }

    /**
     * Clear <arguments> value
     *
     * @return \Ws\ServerErrorDto
     */
    public function clearArguments() {
      return $this->_clear(3);
    }

    /**
     * Get <arguments> value
     *
     * @param int $idx
     * @return string
     */
    public function getArguments($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <arguments> value
     *
     * @param string $value
     * @return \Ws\ServerErrorDto
     */
    public function setArguments($value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <arguments>
     *
     * @return string[]
     */
    public function getArgumentsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <arguments>
     *
     * @param string $value
     * @return \Ws\ServerErrorDto
     */
    public function addArguments($value) {
      return $this->_add(3, $value);
    }
  }
}

namespace Ws {

  class ConstraintViolationErrorDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $message = NULL;

    /**  @var string */
    public $messageTemplate = NULL;

    /**  @var string */
    public $propertyPath = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Ws.ConstraintViolationErrorDto');

      // REQUIRED STRING message = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "message";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING messageTemplate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "messageTemplate";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING propertyPath = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "propertyPath";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage() {
      return $this->_has(1);
    }

    /**
     * Clear <message> value
     *
     * @return \Ws\ConstraintViolationErrorDto
     */
    public function clearMessage() {
      return $this->_clear(1);
    }

    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage() {
      return $this->_get(1);
    }

    /**
     * Set <message> value
     *
     * @param string $value
     * @return \Ws\ConstraintViolationErrorDto
     */
    public function setMessage($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <messageTemplate> has a value
     *
     * @return boolean
     */
    public function hasMessageTemplate() {
      return $this->_has(2);
    }

    /**
     * Clear <messageTemplate> value
     *
     * @return \Ws\ConstraintViolationErrorDto
     */
    public function clearMessageTemplate() {
      return $this->_clear(2);
    }

    /**
     * Get <messageTemplate> value
     *
     * @return string
     */
    public function getMessageTemplate() {
      return $this->_get(2);
    }

    /**
     * Set <messageTemplate> value
     *
     * @param string $value
     * @return \Ws\ConstraintViolationErrorDto
     */
    public function setMessageTemplate($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <propertyPath> has a value
     *
     * @return boolean
     */
    public function hasPropertyPath() {
      return $this->_has(3);
    }

    /**
     * Clear <propertyPath> value
     *
     * @return \Ws\ConstraintViolationErrorDto
     */
    public function clearPropertyPath() {
      return $this->_clear(3);
    }

    /**
     * Get <propertyPath> value
     *
     * @return string
     */
    public function getPropertyPath() {
      return $this->_get(3);
    }

    /**
     * Set <propertyPath> value
     *
     * @param string $value
     * @return \Ws\ConstraintViolationErrorDto
     */
    public function setPropertyPath($value) {
      return $this->_set(3, $value);
    }
  }
}

namespace {
  \Ws\ClientErrorDto::extension(function () {
    // REPEATED MESSAGE Ws.ConstraintViolationErrorDto.errors = 1002
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1002;
    $f->name = "Ws.ConstraintViolationErrorDto.errors";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
    $f->reference = '\Ws\ConstraintViolationErrorDto';
    return $f;
  });
}